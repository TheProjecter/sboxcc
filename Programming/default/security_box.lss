
security_box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  000028f0  00002984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800238  00800238  00002abc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ff  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a30  00000000  00000000  00002cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ab  00000000  00000000  0000372b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c45  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  0000461c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  0000474c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_22>
      5c:	08 00       	.word	0x0008	; ????
      5e:	00 00       	nop
      60:	be 92       	st	-X, r11
      62:	24 49       	sbci	r18, 0x94	; 148
      64:	12 3e       	cpi	r17, 0xE2	; 226
      66:	ab aa       	std	Y+51, r10	; 0x33
      68:	aa 2a       	or	r10, r26
      6a:	be cd       	rjmp	.-1156   	; 0xfffffbe8 <__eeprom_end+0xff7efbe8>
      6c:	cc cc       	rjmp	.-1640   	; 0xfffffa06 <__eeprom_end+0xff7efa06>
      6e:	4c 3e       	cpi	r20, 0xEC	; 236
      70:	00 00       	nop
      72:	00 80       	ld	r0, Z
      74:	be ab       	std	Y+54, r27	; 0x36
      76:	aa aa       	std	Y+50, r10	; 0x32
      78:	aa 3e       	cpi	r26, 0xEA	; 234
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	bf 00       	.word	0x00bf	; ????
      80:	00 00       	nop
      82:	80 3f       	cpi	r24, 0xF0	; 240
      84:	00 00       	nop
      86:	00 00       	nop
      88:	00 08       	sbc	r0, r0
      8a:	41 78       	andi	r20, 0x81	; 129
      8c:	d3 bb       	out	0x13, r29	; 19
      8e:	43 87       	std	Z+11, r20	; 0x0b
      90:	d1 13       	cpse	r29, r17
      92:	3d 19       	sub	r19, r13
      94:	0e 3c       	cpi	r16, 0xCE	; 206
      96:	c3 bd       	out	0x23, r28	; 35
      98:	42 82       	std	Z+2, r4	; 0x02
      9a:	ad 2b       	or	r26, r29
      9c:	3e 68       	ori	r19, 0x8E	; 142
      9e:	ec 82       	std	Y+4, r14	; 0x04
      a0:	76 be       	out	0x36, r7	; 54
      a2:	d9 8f       	std	Y+25, r29	; 0x19
      a4:	e1 a9       	ldd	r30, Z+49	; 0x31
      a6:	3e 4c       	sbci	r19, 0xCE	; 206
      a8:	80 ef       	ldi	r24, 0xF0	; 240
      aa:	ff be       	out	0x3f, r15	; 63
      ac:	01 c4       	rjmp	.+2050   	; 0x8b0 <__stack+0x3b1>
      ae:	ff 7f       	andi	r31, 0xFF	; 255
      b0:	3f 00       	.word	0x003f	; ????
      b2:	00 00       	nop
	...

000000b6 <LCD_character_table>:
      b6:	51 0a 80 2a 00 00 00 0a 00 40 00 00 59 55 18 01     Q..*.....@..YU..
      c6:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
      e2:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
      f2:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
     102:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
     112:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

00000122 <__c.1382>:
	...

00000123 <__c.1410>:
	...

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d4 e0       	ldi	r29, 0x04	; 4
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	12 e0       	ldi	r17, 0x02	; 2
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	e0 ef       	ldi	r30, 0xF0	; 240
     138:	f8 e2       	ldi	r31, 0x28	; 40
     13a:	02 c0       	rjmp	.+4      	; 0x140 <.do_copy_data_start>

0000013c <.do_copy_data_loop>:
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0

00000140 <.do_copy_data_start>:
     140:	a8 33       	cpi	r26, 0x38	; 56
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <.do_copy_data_loop>

00000146 <__do_clear_bss>:
     146:	12 e0       	ldi	r17, 0x02	; 2
     148:	a8 e3       	ldi	r26, 0x38	; 56
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	ae 38       	cpi	r26, 0x8E	; 142
     152:	b1 07       	cpc	r27, r17
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
     15a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <ADC_read>:

#define sbi(port,bit)  (port |= (1<<bit))   //set bit in port
#define cbi(port,bit)  (port &= ~(1<<bit))  //clear bit in port

int ADC_read(void)
{
     162:	df 93       	push	r29
     164:	cf 93       	push	r28
     166:	00 d0       	rcall	.+0      	; 0x168 <ADC_read+0x6>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
	int e;
	sbi(ADCSRA, ADEN);     // Enable the ADC
     16c:	aa e7       	ldi	r26, 0x7A	; 122
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ea e7       	ldi	r30, 0x7A	; 122
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	80 68       	ori	r24, 0x80	; 128
     178:	8c 93       	st	X, r24
	// To save power, the voltage over the LDR and the NTC is turned off when not used
	// This is done by controlling the voltage from a I/O-pin (PORTF3)
	
	sbi(PORTF, PORTF3);     // Enable the VCP (VC-peripheral)
     17a:	a1 e3       	ldi	r26, 0x31	; 49
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	e1 e3       	ldi	r30, 0x31	; 49
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	88 60       	ori	r24, 0x08	; 8
     186:	8c 93       	st	X, r24
	sbi(DDRF, PORTF3);
     188:	a0 e3       	ldi	r26, 0x30	; 48
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	e0 e3       	ldi	r30, 0x30	; 48
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	88 60       	ori	r24, 0x08	; 8
     194:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADSC);        // do single conversion
     196:	aa e7       	ldi	r26, 0x7A	; 122
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	ea e7       	ldi	r30, 0x7A	; 122
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	80 64       	ori	r24, 0x40	; 64
     1a2:	8c 93       	st	X, r24

	while(!(ADCSRA & 0x10));    // wait for conversion done, ADIF flag active
     1a4:	ea e7       	ldi	r30, 0x7A	; 122
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 2f       	mov	r24, r24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	80 71       	andi	r24, 0x10	; 16
     1b0:	90 70       	andi	r25, 0x00	; 0
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	b9 f3       	breq	.-18     	; 0x1a4 <ADC_read+0x42>
	e=(ADCW>>2);
     1b6:	e8 e7       	ldi	r30, 0x78	; 120
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	91 81       	ldd	r25, Z+1	; 0x01
     1be:	96 95       	lsr	r25
     1c0:	87 95       	ror	r24
     1c2:	96 95       	lsr	r25
     1c4:	87 95       	ror	r24
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
	return e;
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <main>:


int main(void)
{
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	c0 59       	subi	r28, 0x90	; 144
     1e6:	d0 40       	sbci	r29, 0x00	; 0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
/// Inputs: PB4(center), PB6(up), PB7(down), PE2(left) and PE3(right)
	DDRB	= DDRB & 0b00101111;
     1f2:	a4 e2       	ldi	r26, 0x24	; 36
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	e4 e2       	ldi	r30, 0x24	; 36
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	8f 72       	andi	r24, 0x2F	; 47
     1fe:	8c 93       	st	X, r24
	DDRE	= DDRE & 0b11101100;
     200:	ad e2       	ldi	r26, 0x2D	; 45
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	ed e2       	ldi	r30, 0x2D	; 45
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8c 7e       	andi	r24, 0xEC	; 236
     20c:	8c 93       	st	X, r24
/// switch on pull up resistors
	PORTB	= PORTB	| 0b11010111;
     20e:	a5 e2       	ldi	r26, 0x25	; 37
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e5 e2       	ldi	r30, 0x25	; 37
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	87 6d       	ori	r24, 0xD7	; 215
     21a:	8c 93       	st	X, r24
	PORTE	= PORTE	| 0b11101100; 
     21c:	ae e2       	ldi	r26, 0x2E	; 46
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	ee e2       	ldi	r30, 0x2E	; 46
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	8c 6e       	ori	r24, 0xEC	; 236
     228:	8c 93       	st	X, r24
  
	LCD_Init();
     22a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_Init>
	//	ADC_init(0b00100000);
	ADCSRA = (1<<ADEN); 
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 e8       	ldi	r24, 0x80	; 128
     234:	80 83       	st	Z, r24
	DDRF=0;
     236:	e0 e3       	ldi	r30, 0x30	; 48
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	10 82       	st	Z, r1

	int value[3];
	int a,b,c,error,v, cont;
	error=0;
     23c:	fe 01       	movw	r30, r28
     23e:	ed 57       	subi	r30, 0x7D	; 125
     240:	ff 4f       	sbci	r31, 0xFF	; 255
     242:	11 82       	std	Z+1, r1	; 0x01
     244:	10 82       	st	Z, r1
	a=3;
     246:	fe 01       	movw	r30, r28
     248:	e7 57       	subi	r30, 0x77	; 119
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	83 e0       	ldi	r24, 0x03	; 3
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	91 83       	std	Z+1, r25	; 0x01
     252:	80 83       	st	Z, r24
	b=3;
     254:	fe 01       	movw	r30, r28
     256:	e9 57       	subi	r30, 0x79	; 121
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	91 83       	std	Z+1, r25	; 0x01
     260:	80 83       	st	Z, r24
	c=3;
     262:	fe 01       	movw	r30, r28
     264:	eb 57       	subi	r30, 0x7B	; 123
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	91 83       	std	Z+1, r25	; 0x01
     26e:	80 83       	st	Z, r24
	double T1, T0, cont1;
	DDRD = 255;
     270:	ea e2       	ldi	r30, 0x2A	; 42
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	80 83       	st	Z, r24
	

while(1)
{
	LCD_TEXT("WELCOME")
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
     280:	fe 01       	movw	r30, r28
     282:	e3 59       	subi	r30, 0x93	; 147
     284:	ff 4f       	sbci	r31, 0xFF	; 255
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	aa ef       	ldi	r26, 0xFA	; 250
     28c:	b4 e4       	ldi	r27, 0x44	; 68
     28e:	80 83       	st	Z, r24
     290:	91 83       	std	Z+1, r25	; 0x01
     292:	a2 83       	std	Z+2, r26	; 0x02
     294:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     296:	8e 01       	movw	r16, r28
     298:	07 59       	subi	r16, 0x97	; 151
     29a:	1f 4f       	sbci	r17, 0xFF	; 255
     29c:	fe 01       	movw	r30, r28
     29e:	e3 59       	subi	r30, 0x93	; 147
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	60 81       	ld	r22, Z
     2a4:	71 81       	ldd	r23, Z+1	; 0x01
     2a6:	82 81       	ldd	r24, Z+2	; 0x02
     2a8:	93 81       	ldd	r25, Z+3	; 0x03
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	4a e7       	ldi	r20, 0x7A	; 122
     2b0:	53 e4       	ldi	r21, 0x43	; 67
     2b2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     2b6:	dc 01       	movw	r26, r24
     2b8:	cb 01       	movw	r24, r22
     2ba:	f8 01       	movw	r30, r16
     2bc:	80 83       	st	Z, r24
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	a2 83       	std	Z+2, r26	; 0x02
     2c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     2c4:	fe 01       	movw	r30, r28
     2c6:	e7 59       	subi	r30, 0x97	; 151
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ca:	60 81       	ld	r22, Z
     2cc:	71 81       	ldd	r23, Z+1	; 0x01
     2ce:	82 81       	ldd	r24, Z+2	; 0x02
     2d0:	93 81       	ldd	r25, Z+3	; 0x03
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e8       	ldi	r20, 0x80	; 128
     2d8:	5f e3       	ldi	r21, 0x3F	; 63
     2da:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     2de:	88 23       	and	r24, r24
     2e0:	44 f4       	brge	.+16     	; 0x2f2 <main+0x11a>
		__ticks = 1;
     2e2:	fe 01       	movw	r30, r28
     2e4:	e9 59       	subi	r30, 0x99	; 153
     2e6:	ff 4f       	sbci	r31, 0xFF	; 255
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	80 83       	st	Z, r24
     2f0:	64 c0       	rjmp	.+200    	; 0x3ba <main+0x1e2>
	else if (__tmp > 65535)
     2f2:	fe 01       	movw	r30, r28
     2f4:	e7 59       	subi	r30, 0x97	; 151
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	60 81       	ld	r22, Z
     2fa:	71 81       	ldd	r23, Z+1	; 0x01
     2fc:	82 81       	ldd	r24, Z+2	; 0x02
     2fe:	93 81       	ldd	r25, Z+3	; 0x03
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	3f ef       	ldi	r19, 0xFF	; 255
     304:	4f e7       	ldi	r20, 0x7F	; 127
     306:	57 e4       	ldi	r21, 0x47	; 71
     308:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     30c:	18 16       	cp	r1, r24
     30e:	0c f0       	brlt	.+2      	; 0x312 <main+0x13a>
     310:	43 c0       	rjmp	.+134    	; 0x398 <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     312:	fe 01       	movw	r30, r28
     314:	e3 59       	subi	r30, 0x93	; 147
     316:	ff 4f       	sbci	r31, 0xFF	; 255
     318:	60 81       	ld	r22, Z
     31a:	71 81       	ldd	r23, Z+1	; 0x01
     31c:	82 81       	ldd	r24, Z+2	; 0x02
     31e:	93 81       	ldd	r25, Z+3	; 0x03
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e2       	ldi	r20, 0x20	; 32
     326:	51 e4       	ldi	r21, 0x41	; 65
     328:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     32c:	dc 01       	movw	r26, r24
     32e:	cb 01       	movw	r24, r22
     330:	8e 01       	movw	r16, r28
     332:	09 59       	subi	r16, 0x99	; 153
     334:	1f 4f       	sbci	r17, 0xFF	; 255
     336:	bc 01       	movw	r22, r24
     338:	cd 01       	movw	r24, r26
     33a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	f8 01       	movw	r30, r16
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	80 83       	st	Z, r24
     348:	1f c0       	rjmp	.+62     	; 0x388 <main+0x1b0>
     34a:	fe 01       	movw	r30, r28
     34c:	eb 59       	subi	r30, 0x9B	; 155
     34e:	ff 4f       	sbci	r31, 0xFF	; 255
     350:	89 e1       	ldi	r24, 0x19	; 25
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	91 83       	std	Z+1, r25	; 0x01
     356:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     358:	fe 01       	movw	r30, r28
     35a:	eb 59       	subi	r30, 0x9B	; 155
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	80 81       	ld	r24, Z
     360:	91 81       	ldd	r25, Z+1	; 0x01
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <main+0x18a>
     366:	fe 01       	movw	r30, r28
     368:	eb 59       	subi	r30, 0x9B	; 155
     36a:	ff 4f       	sbci	r31, 0xFF	; 255
     36c:	91 83       	std	Z+1, r25	; 0x01
     36e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     370:	de 01       	movw	r26, r28
     372:	a9 59       	subi	r26, 0x99	; 153
     374:	bf 4f       	sbci	r27, 0xFF	; 255
     376:	fe 01       	movw	r30, r28
     378:	e9 59       	subi	r30, 0x99	; 153
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	11 96       	adiw	r26, 0x01	; 1
     384:	9c 93       	st	X, r25
     386:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     388:	fe 01       	movw	r30, r28
     38a:	e9 59       	subi	r30, 0x99	; 153
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
     38e:	80 81       	ld	r24, Z
     390:	91 81       	ldd	r25, Z+1	; 0x01
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	d1 f6       	brne	.-76     	; 0x34a <main+0x172>
     396:	27 c0       	rjmp	.+78     	; 0x3e6 <main+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     398:	8e 01       	movw	r16, r28
     39a:	09 59       	subi	r16, 0x99	; 153
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	fe 01       	movw	r30, r28
     3a0:	e7 59       	subi	r30, 0x97	; 151
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	60 81       	ld	r22, Z
     3a6:	71 81       	ldd	r23, Z+1	; 0x01
     3a8:	82 81       	ldd	r24, Z+2	; 0x02
     3aa:	93 81       	ldd	r25, Z+3	; 0x03
     3ac:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	f8 01       	movw	r30, r16
     3b6:	91 83       	std	Z+1, r25	; 0x01
     3b8:	80 83       	st	Z, r24
     3ba:	de 01       	movw	r26, r28
     3bc:	ad 59       	subi	r26, 0x9D	; 157
     3be:	bf 4f       	sbci	r27, 0xFF	; 255
     3c0:	fe 01       	movw	r30, r28
     3c2:	e9 59       	subi	r30, 0x99	; 153
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	8d 93       	st	X+, r24
     3cc:	9c 93       	st	X, r25
     3ce:	fe 01       	movw	r30, r28
     3d0:	ed 59       	subi	r30, 0x9D	; 157
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	80 81       	ld	r24, Z
     3d6:	91 81       	ldd	r25, Z+1	; 0x01
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <main+0x200>
     3dc:	fe 01       	movw	r30, r28
     3de:	ed 59       	subi	r30, 0x9D	; 157
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	91 83       	std	Z+1, r25	; 0x01
     3e4:	80 83       	st	Z, r24
	_delay_ms(2000);
	CLEAR_LCD 								// Clears the LCD screen.
     3e6:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_Clear>
	LCD_TEXT("PASSWORD")
     3ea:	88 e0       	ldi	r24, 0x08	; 8
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>


	while(PINB & (1 << 7));
     3f2:	e3 e2       	ldi	r30, 0x23	; 35
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	88 23       	and	r24, r24
     3fa:	dc f3       	brlt	.-10     	; 0x3f2 <main+0x21a>
	while(!(PINB & (1 << 7)));							
     3fc:	e3 e2       	ldi	r30, 0x23	; 35
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	88 23       	and	r24, r24
     404:	dc f7       	brge	.-10     	; 0x3fc <main+0x224>
	for (int i=0; i<3; i++)             	// get the 3 password numbers
     406:	fe 01       	movw	r30, r28
     408:	ef 58       	subi	r30, 0x8F	; 143
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	11 82       	std	Z+1, r1	; 0x01
     40e:	10 82       	st	Z, r1
     410:	f5 c0       	rjmp	.+490    	; 0x5fc <__stack+0xfd>
	{
		while(PINB & (1 << 7))
		{ 
		   	v=password_value ();
     412:	0e 94 54 07 	call	0xea8	; 0xea8 <password_value>
     416:	fe 01       	movw	r30, r28
     418:	ef 57       	subi	r30, 0x7F	; 127
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	91 83       	std	Z+1, r25	; 0x01
     41e:	80 83       	st	Z, r24
			LCD_NUMBER(v) 
     420:	fe 01       	movw	r30, r28
     422:	ef 57       	subi	r30, 0x7F	; 127
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	2d e3       	ldi	r18, 0x3D	; 61
     42c:	32 e0       	ldi	r19, 0x02	; 2
     42e:	b9 01       	movw	r22, r18
     430:	4a e0       	ldi	r20, 0x0A	; 10
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 6e 12 	call	0x24dc	; 0x24dc <itoa>
     438:	8d e3       	ldi	r24, 0x3D	; 61
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
     440:	fe 01       	movw	r30, r28
     442:	e1 5a       	subi	r30, 0xA1	; 161
     444:	ff 4f       	sbci	r31, 0xFF	; 255
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	a8 e4       	ldi	r26, 0x48	; 72
     44c:	b3 e4       	ldi	r27, 0x43	; 67
     44e:	80 83       	st	Z, r24
     450:	91 83       	std	Z+1, r25	; 0x01
     452:	a2 83       	std	Z+2, r26	; 0x02
     454:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     456:	8e 01       	movw	r16, r28
     458:	05 5a       	subi	r16, 0xA5	; 165
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	fe 01       	movw	r30, r28
     45e:	e1 5a       	subi	r30, 0xA1	; 161
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	60 81       	ld	r22, Z
     464:	71 81       	ldd	r23, Z+1	; 0x01
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	93 81       	ldd	r25, Z+3	; 0x03
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	4a e7       	ldi	r20, 0x7A	; 122
     470:	53 e4       	ldi	r21, 0x43	; 67
     472:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	f8 01       	movw	r30, r16
     47c:	80 83       	st	Z, r24
     47e:	91 83       	std	Z+1, r25	; 0x01
     480:	a2 83       	std	Z+2, r26	; 0x02
     482:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     484:	fe 01       	movw	r30, r28
     486:	e5 5a       	subi	r30, 0xA5	; 165
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	60 81       	ld	r22, Z
     48c:	71 81       	ldd	r23, Z+1	; 0x01
     48e:	82 81       	ldd	r24, Z+2	; 0x02
     490:	93 81       	ldd	r25, Z+3	; 0x03
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e8       	ldi	r20, 0x80	; 128
     498:	5f e3       	ldi	r21, 0x3F	; 63
     49a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     49e:	88 23       	and	r24, r24
     4a0:	44 f4       	brge	.+16     	; 0x4b2 <main+0x2da>
		__ticks = 1;
     4a2:	fe 01       	movw	r30, r28
     4a4:	e7 5a       	subi	r30, 0xA7	; 167
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	91 83       	std	Z+1, r25	; 0x01
     4ae:	80 83       	st	Z, r24
     4b0:	64 c0       	rjmp	.+200    	; 0x57a <__stack+0x7b>
	else if (__tmp > 65535)
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5a       	subi	r30, 0xA5	; 165
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	60 81       	ld	r22, Z
     4ba:	71 81       	ldd	r23, Z+1	; 0x01
     4bc:	82 81       	ldd	r24, Z+2	; 0x02
     4be:	93 81       	ldd	r25, Z+3	; 0x03
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	3f ef       	ldi	r19, 0xFF	; 255
     4c4:	4f e7       	ldi	r20, 0x7F	; 127
     4c6:	57 e4       	ldi	r21, 0x47	; 71
     4c8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     4cc:	18 16       	cp	r1, r24
     4ce:	0c f0       	brlt	.+2      	; 0x4d2 <main+0x2fa>
     4d0:	43 c0       	rjmp	.+134    	; 0x558 <__stack+0x59>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4d2:	fe 01       	movw	r30, r28
     4d4:	e1 5a       	subi	r30, 0xA1	; 161
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	60 81       	ld	r22, Z
     4da:	71 81       	ldd	r23, Z+1	; 0x01
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
     4de:	93 81       	ldd	r25, Z+3	; 0x03
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e2       	ldi	r20, 0x20	; 32
     4e6:	51 e4       	ldi	r21, 0x41	; 65
     4e8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	8e 01       	movw	r16, r28
     4f2:	07 5a       	subi	r16, 0xA7	; 167
     4f4:	1f 4f       	sbci	r17, 0xFF	; 255
     4f6:	bc 01       	movw	r22, r24
     4f8:	cd 01       	movw	r24, r26
     4fa:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	f8 01       	movw	r30, r16
     504:	91 83       	std	Z+1, r25	; 0x01
     506:	80 83       	st	Z, r24
     508:	1f c0       	rjmp	.+62     	; 0x548 <__stack+0x49>
     50a:	fe 01       	movw	r30, r28
     50c:	e9 5a       	subi	r30, 0xA9	; 169
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	89 e1       	ldi	r24, 0x19	; 25
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	fe 01       	movw	r30, r28
     51a:	e9 5a       	subi	r30, 0xA9	; 169
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
     51e:	80 81       	ld	r24, Z
     520:	91 81       	ldd	r25, Z+1	; 0x01
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <__stack+0x23>
     526:	fe 01       	movw	r30, r28
     528:	e9 5a       	subi	r30, 0xA9	; 169
     52a:	ff 4f       	sbci	r31, 0xFF	; 255
     52c:	91 83       	std	Z+1, r25	; 0x01
     52e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     530:	de 01       	movw	r26, r28
     532:	a7 5a       	subi	r26, 0xA7	; 167
     534:	bf 4f       	sbci	r27, 0xFF	; 255
     536:	fe 01       	movw	r30, r28
     538:	e7 5a       	subi	r30, 0xA7	; 167
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	80 81       	ld	r24, Z
     53e:	91 81       	ldd	r25, Z+1	; 0x01
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	11 96       	adiw	r26, 0x01	; 1
     544:	9c 93       	st	X, r25
     546:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     548:	fe 01       	movw	r30, r28
     54a:	e7 5a       	subi	r30, 0xA7	; 167
     54c:	ff 4f       	sbci	r31, 0xFF	; 255
     54e:	80 81       	ld	r24, Z
     550:	91 81       	ldd	r25, Z+1	; 0x01
     552:	00 97       	sbiw	r24, 0x00	; 0
     554:	d1 f6       	brne	.-76     	; 0x50a <__stack+0xb>
     556:	28 c0       	rjmp	.+80     	; 0x5a8 <__stack+0xa9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     558:	8e 01       	movw	r16, r28
     55a:	07 5a       	subi	r16, 0xA7	; 167
     55c:	1f 4f       	sbci	r17, 0xFF	; 255
     55e:	fe 01       	movw	r30, r28
     560:	e5 5a       	subi	r30, 0xA5	; 165
     562:	ff 4f       	sbci	r31, 0xFF	; 255
     564:	60 81       	ld	r22, Z
     566:	71 81       	ldd	r23, Z+1	; 0x01
     568:	82 81       	ldd	r24, Z+2	; 0x02
     56a:	93 81       	ldd	r25, Z+3	; 0x03
     56c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	f8 01       	movw	r30, r16
     576:	91 83       	std	Z+1, r25	; 0x01
     578:	80 83       	st	Z, r24
     57a:	de 01       	movw	r26, r28
     57c:	ab 5a       	subi	r26, 0xAB	; 171
     57e:	bf 4f       	sbci	r27, 0xFF	; 255
     580:	fe 01       	movw	r30, r28
     582:	e7 5a       	subi	r30, 0xA7	; 167
     584:	ff 4f       	sbci	r31, 0xFF	; 255
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	9c 93       	st	X, r25
     58e:	8e 93       	st	-X, r24
     590:	fe 01       	movw	r30, r28
     592:	eb 5a       	subi	r30, 0xAB	; 171
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <__stack+0x9b>
     59e:	fe 01       	movw	r30, r28
     5a0:	eb 5a       	subi	r30, 0xAB	; 171
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	91 83       	std	Z+1, r25	; 0x01
     5a6:	80 83       	st	Z, r24

	while(PINB & (1 << 7));
	while(!(PINB & (1 << 7)));							
	for (int i=0; i<3; i++)             	// get the 3 password numbers
	{
		while(PINB & (1 << 7))
     5a8:	e3 e2       	ldi	r30, 0x23	; 35
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	88 23       	and	r24, r24
     5b0:	0c f4       	brge	.+2      	; 0x5b4 <__stack+0xb5>
     5b2:	2f cf       	rjmp	.-418    	; 0x412 <main+0x23a>
		{ 
		   	v=password_value ();
			LCD_NUMBER(v) 
			_delay_ms(200);
		}
		while(!(PINB & (1 << 7)));
     5b4:	e3 e2       	ldi	r30, 0x23	; 35
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	88 23       	and	r24, r24
     5bc:	dc f7       	brge	.-10     	; 0x5b4 <__stack+0xb5>
		value[i]=password_value ();        	//call the adc
     5be:	fe 01       	movw	r30, r28
     5c0:	ef 58       	subi	r30, 0x8F	; 143
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	00 81       	ld	r16, Z
     5c6:	11 81       	ldd	r17, Z+1	; 0x01
     5c8:	0e 94 54 07 	call	0xea8	; 0xea8 <password_value>
     5cc:	ac 01       	movw	r20, r24
     5ce:	9e 01       	movw	r18, r28
     5d0:	25 57       	subi	r18, 0x75	; 117
     5d2:	3f 4f       	sbci	r19, 0xFF	; 255
     5d4:	c8 01       	movw	r24, r16
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	f9 01       	movw	r30, r18
     5dc:	e8 0f       	add	r30, r24
     5de:	f9 1f       	adc	r31, r25
     5e0:	51 83       	std	Z+1, r21	; 0x01
     5e2:	40 83       	st	Z, r20
	LCD_TEXT("PASSWORD")


	while(PINB & (1 << 7));
	while(!(PINB & (1 << 7)));							
	for (int i=0; i<3; i++)             	// get the 3 password numbers
     5e4:	de 01       	movw	r26, r28
     5e6:	af 58       	subi	r26, 0x8F	; 143
     5e8:	bf 4f       	sbci	r27, 0xFF	; 255
     5ea:	fe 01       	movw	r30, r28
     5ec:	ef 58       	subi	r30, 0x8F	; 143
     5ee:	ff 4f       	sbci	r31, 0xFF	; 255
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	9c 93       	st	X, r25
     5fa:	8e 93       	st	-X, r24
     5fc:	fe 01       	movw	r30, r28
     5fe:	ef 58       	subi	r30, 0x8F	; 143
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	83 30       	cpi	r24, 0x03	; 3
     608:	91 05       	cpc	r25, r1
     60a:	74 f2       	brlt	.-100    	; 0x5a8 <__stack+0xa9>
		}
		while(!(PINB & (1 << 7)));
		value[i]=password_value ();        	//call the adc
		
	}
	if (value[0]==a && value[1]==b && value[2]==c)       	//Check the password
     60c:	fe 01       	movw	r30, r28
     60e:	e5 57       	subi	r30, 0x75	; 117
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	20 81       	ld	r18, Z
     614:	31 81       	ldd	r19, Z+1	; 0x01
     616:	fe 01       	movw	r30, r28
     618:	e7 57       	subi	r30, 0x77	; 119
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	28 17       	cp	r18, r24
     622:	39 07       	cpc	r19, r25
     624:	09 f0       	breq	.+2      	; 0x628 <__stack+0x129>
     626:	ae c3       	rjmp	.+1884   	; 0xd84 <__stack+0x885>
     628:	fe 01       	movw	r30, r28
     62a:	e5 57       	subi	r30, 0x75	; 117
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	22 81       	ldd	r18, Z+2	; 0x02
     630:	33 81       	ldd	r19, Z+3	; 0x03
     632:	fe 01       	movw	r30, r28
     634:	e9 57       	subi	r30, 0x79	; 121
     636:	ff 4f       	sbci	r31, 0xFF	; 255
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	09 f0       	breq	.+2      	; 0x644 <__stack+0x145>
     642:	a0 c3       	rjmp	.+1856   	; 0xd84 <__stack+0x885>
     644:	fe 01       	movw	r30, r28
     646:	e5 57       	subi	r30, 0x75	; 117
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	24 81       	ldd	r18, Z+4	; 0x04
     64c:	35 81       	ldd	r19, Z+5	; 0x05
     64e:	fe 01       	movw	r30, r28
     650:	eb 57       	subi	r30, 0x7B	; 123
     652:	ff 4f       	sbci	r31, 0xFF	; 255
     654:	80 81       	ld	r24, Z
     656:	91 81       	ldd	r25, Z+1	; 0x01
     658:	28 17       	cp	r18, r24
     65a:	39 07       	cpc	r19, r25
     65c:	09 f0       	breq	.+2      	; 0x660 <__stack+0x161>
     65e:	92 c3       	rjmp	.+1828   	; 0xd84 <__stack+0x885>
	{
   		CLEAR_LCD 	
     660:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_Clear>
		LCD_TEXT("OK")
     664:	81 e1       	ldi	r24, 0x11	; 17
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
     66c:	fe 01       	movw	r30, r28
     66e:	ef 5a       	subi	r30, 0xAF	; 175
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	aa ef       	ldi	r26, 0xFA	; 250
     678:	b4 e4       	ldi	r27, 0x44	; 68
     67a:	80 83       	st	Z, r24
     67c:	91 83       	std	Z+1, r25	; 0x01
     67e:	a2 83       	std	Z+2, r26	; 0x02
     680:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     682:	8e 01       	movw	r16, r28
     684:	03 5b       	subi	r16, 0xB3	; 179
     686:	1f 4f       	sbci	r17, 0xFF	; 255
     688:	fe 01       	movw	r30, r28
     68a:	ef 5a       	subi	r30, 0xAF	; 175
     68c:	ff 4f       	sbci	r31, 0xFF	; 255
     68e:	60 81       	ld	r22, Z
     690:	71 81       	ldd	r23, Z+1	; 0x01
     692:	82 81       	ldd	r24, Z+2	; 0x02
     694:	93 81       	ldd	r25, Z+3	; 0x03
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4a e7       	ldi	r20, 0x7A	; 122
     69c:	53 e4       	ldi	r21, 0x43	; 67
     69e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	f8 01       	movw	r30, r16
     6a8:	80 83       	st	Z, r24
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	a2 83       	std	Z+2, r26	; 0x02
     6ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6b0:	fe 01       	movw	r30, r28
     6b2:	e3 5b       	subi	r30, 0xB3	; 179
     6b4:	ff 4f       	sbci	r31, 0xFF	; 255
     6b6:	60 81       	ld	r22, Z
     6b8:	71 81       	ldd	r23, Z+1	; 0x01
     6ba:	82 81       	ldd	r24, Z+2	; 0x02
     6bc:	93 81       	ldd	r25, Z+3	; 0x03
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e8       	ldi	r20, 0x80	; 128
     6c4:	5f e3       	ldi	r21, 0x3F	; 63
     6c6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     6ca:	88 23       	and	r24, r24
     6cc:	44 f4       	brge	.+16     	; 0x6de <__stack+0x1df>
		__ticks = 1;
     6ce:	fe 01       	movw	r30, r28
     6d0:	e5 5b       	subi	r30, 0xB5	; 181
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
     6dc:	64 c0       	rjmp	.+200    	; 0x7a6 <__stack+0x2a7>
	else if (__tmp > 65535)
     6de:	fe 01       	movw	r30, r28
     6e0:	e3 5b       	subi	r30, 0xB3	; 179
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	60 81       	ld	r22, Z
     6e6:	71 81       	ldd	r23, Z+1	; 0x01
     6e8:	82 81       	ldd	r24, Z+2	; 0x02
     6ea:	93 81       	ldd	r25, Z+3	; 0x03
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	3f ef       	ldi	r19, 0xFF	; 255
     6f0:	4f e7       	ldi	r20, 0x7F	; 127
     6f2:	57 e4       	ldi	r21, 0x47	; 71
     6f4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     6f8:	18 16       	cp	r1, r24
     6fa:	0c f0       	brlt	.+2      	; 0x6fe <__stack+0x1ff>
     6fc:	43 c0       	rjmp	.+134    	; 0x784 <__stack+0x285>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6fe:	fe 01       	movw	r30, r28
     700:	ef 5a       	subi	r30, 0xAF	; 175
     702:	ff 4f       	sbci	r31, 0xFF	; 255
     704:	60 81       	ld	r22, Z
     706:	71 81       	ldd	r23, Z+1	; 0x01
     708:	82 81       	ldd	r24, Z+2	; 0x02
     70a:	93 81       	ldd	r25, Z+3	; 0x03
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e2       	ldi	r20, 0x20	; 32
     712:	51 e4       	ldi	r21, 0x41	; 65
     714:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	8e 01       	movw	r16, r28
     71e:	05 5b       	subi	r16, 0xB5	; 181
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	bc 01       	movw	r22, r24
     724:	cd 01       	movw	r24, r26
     726:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	f8 01       	movw	r30, r16
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
     734:	1f c0       	rjmp	.+62     	; 0x774 <__stack+0x275>
     736:	fe 01       	movw	r30, r28
     738:	e7 5b       	subi	r30, 0xB7	; 183
     73a:	ff 4f       	sbci	r31, 0xFF	; 255
     73c:	89 e1       	ldi	r24, 0x19	; 25
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
     744:	fe 01       	movw	r30, r28
     746:	e7 5b       	subi	r30, 0xB7	; 183
     748:	ff 4f       	sbci	r31, 0xFF	; 255
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <__stack+0x24f>
     752:	fe 01       	movw	r30, r28
     754:	e7 5b       	subi	r30, 0xB7	; 183
     756:	ff 4f       	sbci	r31, 0xFF	; 255
     758:	91 83       	std	Z+1, r25	; 0x01
     75a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75c:	de 01       	movw	r26, r28
     75e:	a5 5b       	subi	r26, 0xB5	; 181
     760:	bf 4f       	sbci	r27, 0xFF	; 255
     762:	fe 01       	movw	r30, r28
     764:	e5 5b       	subi	r30, 0xB5	; 181
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	11 96       	adiw	r26, 0x01	; 1
     770:	9c 93       	st	X, r25
     772:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     774:	fe 01       	movw	r30, r28
     776:	e5 5b       	subi	r30, 0xB5	; 181
     778:	ff 4f       	sbci	r31, 0xFF	; 255
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	00 97       	sbiw	r24, 0x00	; 0
     780:	d1 f6       	brne	.-76     	; 0x736 <__stack+0x237>
     782:	27 c0       	rjmp	.+78     	; 0x7d2 <__stack+0x2d3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     784:	8e 01       	movw	r16, r28
     786:	05 5b       	subi	r16, 0xB5	; 181
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	fe 01       	movw	r30, r28
     78c:	e3 5b       	subi	r30, 0xB3	; 179
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	60 81       	ld	r22, Z
     792:	71 81       	ldd	r23, Z+1	; 0x01
     794:	82 81       	ldd	r24, Z+2	; 0x02
     796:	93 81       	ldd	r25, Z+3	; 0x03
     798:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	f8 01       	movw	r30, r16
     7a2:	91 83       	std	Z+1, r25	; 0x01
     7a4:	80 83       	st	Z, r24
     7a6:	de 01       	movw	r26, r28
     7a8:	a9 5b       	subi	r26, 0xB9	; 185
     7aa:	bf 4f       	sbci	r27, 0xFF	; 255
     7ac:	fe 01       	movw	r30, r28
     7ae:	e5 5b       	subi	r30, 0xB5	; 181
     7b0:	ff 4f       	sbci	r31, 0xFF	; 255
     7b2:	80 81       	ld	r24, Z
     7b4:	91 81       	ldd	r25, Z+1	; 0x01
     7b6:	8d 93       	st	X+, r24
     7b8:	9c 93       	st	X, r25
     7ba:	fe 01       	movw	r30, r28
     7bc:	e9 5b       	subi	r30, 0xB9	; 185
     7be:	ff 4f       	sbci	r31, 0xFF	; 255
     7c0:	80 81       	ld	r24, Z
     7c2:	91 81       	ldd	r25, Z+1	; 0x01
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <__stack+0x2c5>
     7c8:	fe 01       	movw	r30, r28
     7ca:	e9 5b       	subi	r30, 0xB9	; 185
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
		_delay_ms(2000);
		T0=temperature();    
     7d2:	0e 94 96 07 	call	0xf2c	; 0xf2c <temperature>
     7d6:	8e 01       	movw	r16, r28
     7d8:	09 58       	subi	r16, 0x89	; 137
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
     7dc:	aa 27       	eor	r26, r26
     7de:	97 fd       	sbrc	r25, 7
     7e0:	a0 95       	com	r26
     7e2:	ba 2f       	mov	r27, r26
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__floatsisf>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	f8 01       	movw	r30, r16
     7f2:	80 83       	st	Z, r24
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	a2 83       	std	Z+2, r26	; 0x02
     7f8:	b3 83       	std	Z+3, r27	; 0x03
    	sbi(PORTB,0);	        // TUrn ligth on, open door PORTB0
     7fa:	a5 e2       	ldi	r26, 0x25	; 37
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e5 e2       	ldi	r30, 0x25	; 37
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	81 60       	ori	r24, 0x01	; 1
     806:	8c 93       	st	X, r24
		cont1=cont=0;
     808:	fe 01       	movw	r30, r28
     80a:	e1 58       	subi	r30, 0x81	; 129
     80c:	ff 4f       	sbci	r31, 0xFF	; 255
     80e:	11 82       	std	Z+1, r1	; 0x01
     810:	10 82       	st	Z, r1
     812:	fe 01       	movw	r30, r28
     814:	ed 58       	subi	r30, 0x8D	; 141
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	a0 e0       	ldi	r26, 0x00	; 0
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	80 83       	st	Z, r24
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	a2 83       	std	Z+2, r26	; 0x02
     826:	b3 83       	std	Z+3, r27	; 0x03
     828:	a2 c2       	rjmp	.+1348   	; 0xd6e <__stack+0x86f>

		while (PORTB & 0b00000001)           // Check counter
		{
         	cont=counter(cont);
     82a:	fe 01       	movw	r30, r28
     82c:	e1 58       	subi	r30, 0x81	; 129
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	0e 94 1e 08 	call	0x103c	; 0x103c <counter>
     838:	fe 01       	movw	r30, r28
     83a:	e1 58       	subi	r30, 0x81	; 129
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	80 83       	st	Z, r24
				
 			if(cont==1)
     842:	fe 01       	movw	r30, r28
     844:	e1 58       	subi	r30, 0x81	; 129
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	91 05       	cpc	r25, r1
     850:	09 f0       	breq	.+2      	; 0x854 <__stack+0x355>
     852:	51 c1       	rjmp	.+674    	; 0xaf6 <__stack+0x5f7>
			{
			
				T1=temperature();
     854:	0e 94 96 07 	call	0xf2c	; 0xf2c <temperature>
     858:	8e 01       	movw	r16, r28
     85a:	05 58       	subi	r16, 0x85	; 133
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
     85e:	aa 27       	eor	r26, r26
     860:	97 fd       	sbrc	r25, 7
     862:	a0 95       	com	r26
     864:	ba 2f       	mov	r27, r26
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__floatsisf>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	f8 01       	movw	r30, r16
     874:	80 83       	st	Z, r24
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	a2 83       	std	Z+2, r26	; 0x02
     87a:	b3 83       	std	Z+3, r27	; 0x03
				LCD_TEXT("TEMP")
     87c:	84 e1       	ldi	r24, 0x14	; 20
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
     884:	fe 01       	movw	r30, r28
     886:	ed 5b       	subi	r30, 0xBD	; 189
     888:	ff 4f       	sbci	r31, 0xFF	; 255
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	a8 e4       	ldi	r26, 0x48	; 72
     890:	b4 e4       	ldi	r27, 0x44	; 68
     892:	80 83       	st	Z, r24
     894:	91 83       	std	Z+1, r25	; 0x01
     896:	a2 83       	std	Z+2, r26	; 0x02
     898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     89a:	8e 01       	movw	r16, r28
     89c:	01 5c       	subi	r16, 0xC1	; 193
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	fe 01       	movw	r30, r28
     8a2:	ed 5b       	subi	r30, 0xBD	; 189
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	60 81       	ld	r22, Z
     8a8:	71 81       	ldd	r23, Z+1	; 0x01
     8aa:	82 81       	ldd	r24, Z+2	; 0x02
     8ac:	93 81       	ldd	r25, Z+3	; 0x03
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	4a e7       	ldi	r20, 0x7A	; 122
     8b4:	53 e4       	ldi	r21, 0x43	; 67
     8b6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	f8 01       	movw	r30, r16
     8c0:	80 83       	st	Z, r24
     8c2:	91 83       	std	Z+1, r25	; 0x01
     8c4:	a2 83       	std	Z+2, r26	; 0x02
     8c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8c8:	fe 01       	movw	r30, r28
     8ca:	ff 96       	adiw	r30, 0x3f	; 63
     8cc:	60 81       	ld	r22, Z
     8ce:	71 81       	ldd	r23, Z+1	; 0x01
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	93 81       	ldd	r25, Z+3	; 0x03
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e8       	ldi	r20, 0x80	; 128
     8da:	5f e3       	ldi	r21, 0x3F	; 63
     8dc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     8e0:	88 23       	and	r24, r24
     8e2:	2c f4       	brge	.+10     	; 0x8ee <__stack+0x3ef>
		__ticks = 1;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9e af       	std	Y+62, r25	; 0x3e
     8ea:	8d af       	std	Y+61, r24	; 0x3d
     8ec:	46 c0       	rjmp	.+140    	; 0x97a <__stack+0x47b>
	else if (__tmp > 65535)
     8ee:	fe 01       	movw	r30, r28
     8f0:	ff 96       	adiw	r30, 0x3f	; 63
     8f2:	60 81       	ld	r22, Z
     8f4:	71 81       	ldd	r23, Z+1	; 0x01
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	93 81       	ldd	r25, Z+3	; 0x03
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	3f ef       	ldi	r19, 0xFF	; 255
     8fe:	4f e7       	ldi	r20, 0x7F	; 127
     900:	57 e4       	ldi	r21, 0x47	; 71
     902:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     906:	18 16       	cp	r1, r24
     908:	64 f5       	brge	.+88     	; 0x962 <__stack+0x463>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     90a:	fe 01       	movw	r30, r28
     90c:	ed 5b       	subi	r30, 0xBD	; 189
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	60 81       	ld	r22, Z
     912:	71 81       	ldd	r23, Z+1	; 0x01
     914:	82 81       	ldd	r24, Z+2	; 0x02
     916:	93 81       	ldd	r25, Z+3	; 0x03
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e2       	ldi	r20, 0x20	; 32
     91e:	51 e4       	ldi	r21, 0x41	; 65
     920:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     924:	dc 01       	movw	r26, r24
     926:	cb 01       	movw	r24, r22
     928:	bc 01       	movw	r22, r24
     92a:	cd 01       	movw	r24, r26
     92c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	9e af       	std	Y+62, r25	; 0x3e
     936:	8d af       	std	Y+61, r24	; 0x3d
     938:	0f c0       	rjmp	.+30     	; 0x958 <__stack+0x459>
     93a:	89 e1       	ldi	r24, 0x19	; 25
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	9c af       	std	Y+60, r25	; 0x3c
     940:	8b af       	std	Y+59, r24	; 0x3b
     942:	8b ad       	ldd	r24, Y+59	; 0x3b
     944:	9c ad       	ldd	r25, Y+60	; 0x3c
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <__stack+0x447>
     94a:	9c af       	std	Y+60, r25	; 0x3c
     94c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     94e:	8d ad       	ldd	r24, Y+61	; 0x3d
     950:	9e ad       	ldd	r25, Y+62	; 0x3e
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	9e af       	std	Y+62, r25	; 0x3e
     956:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     958:	8d ad       	ldd	r24, Y+61	; 0x3d
     95a:	9e ad       	ldd	r25, Y+62	; 0x3e
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	69 f7       	brne	.-38     	; 0x93a <__stack+0x43b>
     960:	16 c0       	rjmp	.+44     	; 0x98e <__stack+0x48f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     962:	fe 01       	movw	r30, r28
     964:	ff 96       	adiw	r30, 0x3f	; 63
     966:	60 81       	ld	r22, Z
     968:	71 81       	ldd	r23, Z+1	; 0x01
     96a:	82 81       	ldd	r24, Z+2	; 0x02
     96c:	93 81       	ldd	r25, Z+3	; 0x03
     96e:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9e af       	std	Y+62, r25	; 0x3e
     978:	8d af       	std	Y+61, r24	; 0x3d
     97a:	8d ad       	ldd	r24, Y+61	; 0x3d
     97c:	9e ad       	ldd	r25, Y+62	; 0x3e
     97e:	9a af       	std	Y+58, r25	; 0x3a
     980:	89 af       	std	Y+57, r24	; 0x39
     982:	89 ad       	ldd	r24, Y+57	; 0x39
     984:	9a ad       	ldd	r25, Y+58	; 0x3a
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <__stack+0x487>
     98a:	9a af       	std	Y+58, r25	; 0x3a
     98c:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(800);
				LCD_NUMBER(T1)
     98e:	fe 01       	movw	r30, r28
     990:	e5 58       	subi	r30, 0x85	; 133
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	60 81       	ld	r22, Z
     996:	71 81       	ldd	r23, Z+1	; 0x01
     998:	82 81       	ldd	r24, Z+2	; 0x02
     99a:	93 81       	ldd	r25, Z+3	; 0x03
     99c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fixsfsi>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	2d e3       	ldi	r18, 0x3D	; 61
     9a6:	32 e0       	ldi	r19, 0x02	; 2
     9a8:	b9 01       	movw	r22, r18
     9aa:	4a e0       	ldi	r20, 0x0A	; 10
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	0e 94 6e 12 	call	0x24dc	; 0x24dc <itoa>
     9b2:	8d e3       	ldi	r24, 0x3D	; 61
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
				if(T1>T0)
     9ba:	fe 01       	movw	r30, r28
     9bc:	e5 58       	subi	r30, 0x85	; 133
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	de 01       	movw	r26, r28
     9c2:	a9 58       	subi	r26, 0x89	; 137
     9c4:	bf 4f       	sbci	r27, 0xFF	; 255
     9c6:	60 81       	ld	r22, Z
     9c8:	71 81       	ldd	r23, Z+1	; 0x01
     9ca:	82 81       	ldd	r24, Z+2	; 0x02
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	2d 91       	ld	r18, X+
     9d0:	3d 91       	ld	r19, X+
     9d2:	4d 91       	ld	r20, X+
     9d4:	5c 91       	ld	r21, X
     9d6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     9da:	18 16       	cp	r1, r24
     9dc:	44 f4       	brge	.+16     	; 0x9ee <__stack+0x4ef>
					sbi(PORTB,1);		//Turn cooler on
     9de:	a5 e2       	ldi	r26, 0x25	; 37
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e5 e2       	ldi	r30, 0x25	; 37
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	82 60       	ori	r24, 0x02	; 2
     9ea:	8c 93       	st	X, r24
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <__stack+0x4fd>
				else
					cbi(PORTB,1);		//Turn cooler off
     9ee:	a5 e2       	ldi	r26, 0x25	; 37
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	e5 e2       	ldi	r30, 0x25	; 37
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	8d 7f       	andi	r24, 0xFD	; 253
     9fa:	8c 93       	st	X, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a8 e4       	ldi	r26, 0x48	; 72
     a02:	b4 e4       	ldi	r27, 0x44	; 68
     a04:	8d ab       	std	Y+53, r24	; 0x35
     a06:	9e ab       	std	Y+54, r25	; 0x36
     a08:	af ab       	std	Y+55, r26	; 0x37
     a0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a0c:	6d a9       	ldd	r22, Y+53	; 0x35
     a0e:	7e a9       	ldd	r23, Y+54	; 0x36
     a10:	8f a9       	ldd	r24, Y+55	; 0x37
     a12:	98 ad       	ldd	r25, Y+56	; 0x38
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	4a e7       	ldi	r20, 0x7A	; 122
     a1a:	53 e4       	ldi	r21, 0x43	; 67
     a1c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	89 ab       	std	Y+49, r24	; 0x31
     a26:	9a ab       	std	Y+50, r25	; 0x32
     a28:	ab ab       	std	Y+51, r26	; 0x33
     a2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     a2c:	69 a9       	ldd	r22, Y+49	; 0x31
     a2e:	7a a9       	ldd	r23, Y+50	; 0x32
     a30:	8b a9       	ldd	r24, Y+51	; 0x33
     a32:	9c a9       	ldd	r25, Y+52	; 0x34
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e8       	ldi	r20, 0x80	; 128
     a3a:	5f e3       	ldi	r21, 0x3F	; 63
     a3c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     a40:	88 23       	and	r24, r24
     a42:	2c f4       	brge	.+10     	; 0xa4e <__stack+0x54f>
		__ticks = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	98 ab       	std	Y+48, r25	; 0x30
     a4a:	8f a7       	std	Y+47, r24	; 0x2f
     a4c:	3f c0       	rjmp	.+126    	; 0xacc <__stack+0x5cd>
	else if (__tmp > 65535)
     a4e:	69 a9       	ldd	r22, Y+49	; 0x31
     a50:	7a a9       	ldd	r23, Y+50	; 0x32
     a52:	8b a9       	ldd	r24, Y+51	; 0x33
     a54:	9c a9       	ldd	r25, Y+52	; 0x34
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	3f ef       	ldi	r19, 0xFF	; 255
     a5a:	4f e7       	ldi	r20, 0x7F	; 127
     a5c:	57 e4       	ldi	r21, 0x47	; 71
     a5e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     a62:	18 16       	cp	r1, r24
     a64:	4c f5       	brge	.+82     	; 0xab8 <__stack+0x5b9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a66:	6d a9       	ldd	r22, Y+53	; 0x35
     a68:	7e a9       	ldd	r23, Y+54	; 0x36
     a6a:	8f a9       	ldd	r24, Y+55	; 0x37
     a6c:	98 ad       	ldd	r25, Y+56	; 0x38
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e2       	ldi	r20, 0x20	; 32
     a74:	51 e4       	ldi	r21, 0x41	; 65
     a76:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	98 ab       	std	Y+48, r25	; 0x30
     a8c:	8f a7       	std	Y+47, r24	; 0x2f
     a8e:	0f c0       	rjmp	.+30     	; 0xaae <__stack+0x5af>
     a90:	89 e1       	ldi	r24, 0x19	; 25
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9e a7       	std	Y+46, r25	; 0x2e
     a96:	8d a7       	std	Y+45, r24	; 0x2d
     a98:	8d a5       	ldd	r24, Y+45	; 0x2d
     a9a:	9e a5       	ldd	r25, Y+46	; 0x2e
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <__stack+0x59d>
     aa0:	9e a7       	std	Y+46, r25	; 0x2e
     aa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
     aa6:	98 a9       	ldd	r25, Y+48	; 0x30
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	98 ab       	std	Y+48, r25	; 0x30
     aac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aae:	8f a5       	ldd	r24, Y+47	; 0x2f
     ab0:	98 a9       	ldd	r25, Y+48	; 0x30
     ab2:	00 97       	sbiw	r24, 0x00	; 0
     ab4:	69 f7       	brne	.-38     	; 0xa90 <__stack+0x591>
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <__stack+0x5e1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab8:	69 a9       	ldd	r22, Y+49	; 0x31
     aba:	7a a9       	ldd	r23, Y+50	; 0x32
     abc:	8b a9       	ldd	r24, Y+51	; 0x33
     abe:	9c a9       	ldd	r25, Y+52	; 0x34
     ac0:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	98 ab       	std	Y+48, r25	; 0x30
     aca:	8f a7       	std	Y+47, r24	; 0x2f
     acc:	8f a5       	ldd	r24, Y+47	; 0x2f
     ace:	98 a9       	ldd	r25, Y+48	; 0x30
     ad0:	9c a7       	std	Y+44, r25	; 0x2c
     ad2:	8b a7       	std	Y+43, r24	; 0x2b
     ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <__stack+0x5d9>
     adc:	9c a7       	std	Y+44, r25	; 0x2c
     ade:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(800);
				cont1=0;
     ae0:	fe 01       	movw	r30, r28
     ae2:	ed 58       	subi	r30, 0x8D	; 141
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	80 83       	st	Z, r24
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	a2 83       	std	Z+2, r26	; 0x02
     af4:	b3 83       	std	Z+3, r27	; 0x03
			}
			if(cont>1)
     af6:	fe 01       	movw	r30, r28
     af8:	e1 58       	subi	r30, 0x81	; 129
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	91 05       	cpc	r25, r1
     b04:	0c f4       	brge	.+2      	; 0xb08 <__stack+0x609>
     b06:	86 c0       	rjmp	.+268    	; 0xc14 <__stack+0x715>
			{
			    sbi(PORTB,2);			//Turn alarm off
     b08:	a5 e2       	ldi	r26, 0x25	; 37
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e5 e2       	ldi	r30, 0x25	; 37
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	84 60       	ori	r24, 0x04	; 4
     b14:	8c 93       	st	X, r24
				LCD_TEXT("ALARM")
     b16:	89 e1       	ldi	r24, 0x19	; 25
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
				cbi(PORTB,0); 
     b1e:	a5 e2       	ldi	r26, 0x25	; 37
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	e5 e2       	ldi	r30, 0x25	; 37
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	8e 7f       	andi	r24, 0xFE	; 254
     b2a:	8c 93       	st	X, r24
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	aa e7       	ldi	r26, 0x7A	; 122
     b32:	b4 e4       	ldi	r27, 0x44	; 68
     b34:	8f a3       	std	Y+39, r24	; 0x27
     b36:	98 a7       	std	Y+40, r25	; 0x28
     b38:	a9 a7       	std	Y+41, r26	; 0x29
     b3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b3c:	6f a1       	ldd	r22, Y+39	; 0x27
     b3e:	78 a5       	ldd	r23, Y+40	; 0x28
     b40:	89 a5       	ldd	r24, Y+41	; 0x29
     b42:	9a a5       	ldd	r25, Y+42	; 0x2a
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	4a e7       	ldi	r20, 0x7A	; 122
     b4a:	53 e4       	ldi	r21, 0x43	; 67
     b4c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	8b a3       	std	Y+35, r24	; 0x23
     b56:	9c a3       	std	Y+36, r25	; 0x24
     b58:	ad a3       	std	Y+37, r26	; 0x25
     b5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     b5c:	6b a1       	ldd	r22, Y+35	; 0x23
     b5e:	7c a1       	ldd	r23, Y+36	; 0x24
     b60:	8d a1       	ldd	r24, Y+37	; 0x25
     b62:	9e a1       	ldd	r25, Y+38	; 0x26
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e8       	ldi	r20, 0x80	; 128
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     b70:	88 23       	and	r24, r24
     b72:	2c f4       	brge	.+10     	; 0xb7e <__stack+0x67f>
		__ticks = 1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	9a a3       	std	Y+34, r25	; 0x22
     b7a:	89 a3       	std	Y+33, r24	; 0x21
     b7c:	3f c0       	rjmp	.+126    	; 0xbfc <__stack+0x6fd>
	else if (__tmp > 65535)
     b7e:	6b a1       	ldd	r22, Y+35	; 0x23
     b80:	7c a1       	ldd	r23, Y+36	; 0x24
     b82:	8d a1       	ldd	r24, Y+37	; 0x25
     b84:	9e a1       	ldd	r25, Y+38	; 0x26
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	3f ef       	ldi	r19, 0xFF	; 255
     b8a:	4f e7       	ldi	r20, 0x7F	; 127
     b8c:	57 e4       	ldi	r21, 0x47	; 71
     b8e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     b92:	18 16       	cp	r1, r24
     b94:	4c f5       	brge	.+82     	; 0xbe8 <__stack+0x6e9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b96:	6f a1       	ldd	r22, Y+39	; 0x27
     b98:	78 a5       	ldd	r23, Y+40	; 0x28
     b9a:	89 a5       	ldd	r24, Y+41	; 0x29
     b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e2       	ldi	r20, 0x20	; 32
     ba4:	51 e4       	ldi	r21, 0x41	; 65
     ba6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	bc 01       	movw	r22, r24
     bb0:	cd 01       	movw	r24, r26
     bb2:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	9a a3       	std	Y+34, r25	; 0x22
     bbc:	89 a3       	std	Y+33, r24	; 0x21
     bbe:	0f c0       	rjmp	.+30     	; 0xbde <__stack+0x6df>
     bc0:	89 e1       	ldi	r24, 0x19	; 25
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	98 a3       	std	Y+32, r25	; 0x20
     bc6:	8f 8f       	std	Y+31, r24	; 0x1f
     bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bca:	98 a1       	ldd	r25, Y+32	; 0x20
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <__stack+0x6cd>
     bd0:	98 a3       	std	Y+32, r25	; 0x20
     bd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd4:	89 a1       	ldd	r24, Y+33	; 0x21
     bd6:	9a a1       	ldd	r25, Y+34	; 0x22
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	9a a3       	std	Y+34, r25	; 0x22
     bdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bde:	89 a1       	ldd	r24, Y+33	; 0x21
     be0:	9a a1       	ldd	r25, Y+34	; 0x22
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	69 f7       	brne	.-38     	; 0xbc0 <__stack+0x6c1>
     be6:	14 c0       	rjmp	.+40     	; 0xc10 <__stack+0x711>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     be8:	6b a1       	ldd	r22, Y+35	; 0x23
     bea:	7c a1       	ldd	r23, Y+36	; 0x24
     bec:	8d a1       	ldd	r24, Y+37	; 0x25
     bee:	9e a1       	ldd	r25, Y+38	; 0x26
     bf0:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9a a3       	std	Y+34, r25	; 0x22
     bfa:	89 a3       	std	Y+33, r24	; 0x21
     bfc:	89 a1       	ldd	r24, Y+33	; 0x21
     bfe:	9a a1       	ldd	r25, Y+34	; 0x22
     c00:	9e 8f       	std	Y+30, r25	; 0x1e
     c02:	8d 8f       	std	Y+29, r24	; 0x1d
     c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <__stack+0x709>
     c0c:	9e 8f       	std	Y+30, r25	; 0x1e
     c0e:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				block_system();
     c10:	0e 94 7f 07 	call	0xefe	; 0xefe <block_system>
			}
		    if(cont<=0)
     c14:	fe 01       	movw	r30, r28
     c16:	e1 58       	subi	r30, 0x81	; 129
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	18 16       	cp	r1, r24
     c20:	19 06       	cpc	r1, r25
     c22:	0c f4       	brge	.+2      	; 0xc26 <__stack+0x727>
     c24:	a4 c0       	rjmp	.+328    	; 0xd6e <__stack+0x86f>
			{
 				if(cont1<10000)
     c26:	fe 01       	movw	r30, r28
     c28:	ed 58       	subi	r30, 0x8D	; 141
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	60 81       	ld	r22, Z
     c2e:	71 81       	ldd	r23, Z+1	; 0x01
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	93 81       	ldd	r25, Z+3	; 0x03
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e4       	ldi	r19, 0x40	; 64
     c38:	4c e1       	ldi	r20, 0x1C	; 28
     c3a:	56 e4       	ldi	r21, 0x46	; 70
     c3c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     c40:	88 23       	and	r24, r24
     c42:	c4 f4       	brge	.+48     	; 0xc74 <__stack+0x775>
				{
					cont1++;
     c44:	8e 01       	movw	r16, r28
     c46:	0d 58       	subi	r16, 0x8D	; 141
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	fe 01       	movw	r30, r28
     c4c:	ed 58       	subi	r30, 0x8D	; 141
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	60 81       	ld	r22, Z
     c52:	71 81       	ldd	r23, Z+1	; 0x01
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__addsf3>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	f8 01       	movw	r30, r16
     c6a:	80 83       	st	Z, r24
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	a2 83       	std	Z+2, r26	; 0x02
     c70:	b3 83       	std	Z+3, r27	; 0x03
     c72:	7d c0       	rjmp	.+250    	; 0xd6e <__stack+0x86f>
				}
				else
				{
					LCD_TEXT("Exit")
     c74:	8f e1       	ldi	r24, 0x1F	; 31
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	aa ef       	ldi	r26, 0xFA	; 250
     c82:	b3 e4       	ldi	r27, 0x43	; 67
     c84:	89 8f       	std	Y+25, r24	; 0x19
     c86:	9a 8f       	std	Y+26, r25	; 0x1a
     c88:	ab 8f       	std	Y+27, r26	; 0x1b
     c8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c8c:	69 8d       	ldd	r22, Y+25	; 0x19
     c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	4a e7       	ldi	r20, 0x7A	; 122
     c9a:	53 e4       	ldi	r21, 0x43	; 67
     c9c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	8d 8b       	std	Y+21, r24	; 0x15
     ca6:	9e 8b       	std	Y+22, r25	; 0x16
     ca8:	af 8b       	std	Y+23, r26	; 0x17
     caa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cac:	6d 89       	ldd	r22, Y+21	; 0x15
     cae:	7e 89       	ldd	r23, Y+22	; 0x16
     cb0:	8f 89       	ldd	r24, Y+23	; 0x17
     cb2:	98 8d       	ldd	r25, Y+24	; 0x18
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e8       	ldi	r20, 0x80	; 128
     cba:	5f e3       	ldi	r21, 0x3F	; 63
     cbc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     cc0:	88 23       	and	r24, r24
     cc2:	2c f4       	brge	.+10     	; 0xcce <__stack+0x7cf>
		__ticks = 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9c 8b       	std	Y+20, r25	; 0x14
     cca:	8b 8b       	std	Y+19, r24	; 0x13
     ccc:	3f c0       	rjmp	.+126    	; 0xd4c <__stack+0x84d>
	else if (__tmp > 65535)
     cce:	6d 89       	ldd	r22, Y+21	; 0x15
     cd0:	7e 89       	ldd	r23, Y+22	; 0x16
     cd2:	8f 89       	ldd	r24, Y+23	; 0x17
     cd4:	98 8d       	ldd	r25, Y+24	; 0x18
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	4f e7       	ldi	r20, 0x7F	; 127
     cdc:	57 e4       	ldi	r21, 0x47	; 71
     cde:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	4c f5       	brge	.+82     	; 0xd38 <__stack+0x839>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce6:	69 8d       	ldd	r22, Y+25	; 0x19
     ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9c 8b       	std	Y+20, r25	; 0x14
     d0c:	8b 8b       	std	Y+19, r24	; 0x13
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <__stack+0x82f>
     d10:	89 e1       	ldi	r24, 0x19	; 25
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9a 8b       	std	Y+18, r25	; 0x12
     d16:	89 8b       	std	Y+17, r24	; 0x11
     d18:	89 89       	ldd	r24, Y+17	; 0x11
     d1a:	9a 89       	ldd	r25, Y+18	; 0x12
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <__stack+0x81d>
     d20:	9a 8b       	std	Y+18, r25	; 0x12
     d22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d24:	8b 89       	ldd	r24, Y+19	; 0x13
     d26:	9c 89       	ldd	r25, Y+20	; 0x14
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	9c 8b       	std	Y+20, r25	; 0x14
     d2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2e:	8b 89       	ldd	r24, Y+19	; 0x13
     d30:	9c 89       	ldd	r25, Y+20	; 0x14
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	69 f7       	brne	.-38     	; 0xd10 <__stack+0x811>
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <__stack+0x861>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d38:	6d 89       	ldd	r22, Y+21	; 0x15
     d3a:	7e 89       	ldd	r23, Y+22	; 0x16
     d3c:	8f 89       	ldd	r24, Y+23	; 0x17
     d3e:	98 8d       	ldd	r25, Y+24	; 0x18
     d40:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	9c 8b       	std	Y+20, r25	; 0x14
     d4a:	8b 8b       	std	Y+19, r24	; 0x13
     d4c:	8b 89       	ldd	r24, Y+19	; 0x13
     d4e:	9c 89       	ldd	r25, Y+20	; 0x14
     d50:	98 8b       	std	Y+16, r25	; 0x10
     d52:	8f 87       	std	Y+15, r24	; 0x0f
     d54:	8f 85       	ldd	r24, Y+15	; 0x0f
     d56:	98 89       	ldd	r25, Y+16	; 0x10
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <__stack+0x859>
     d5c:	98 8b       	std	Y+16, r25	; 0x10
     d5e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
				 	cbi(PORTB,0);	        // TUrn ligth off, close door
     d60:	a5 e2       	ldi	r26, 0x25	; 37
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e5 e2       	ldi	r30, 0x25	; 37
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8e 7f       	andi	r24, 0xFE	; 254
     d6c:	8c 93       	st	X, r24
		_delay_ms(2000);
		T0=temperature();    
    	sbi(PORTB,0);	        // TUrn ligth on, open door PORTB0
		cont1=cont=0;

		while (PORTB & 0b00000001)           // Check counter
     d6e:	e5 e2       	ldi	r30, 0x25	; 37
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	81 70       	andi	r24, 0x01	; 1
     d7a:	90 70       	andi	r25, 0x00	; 0
     d7c:	88 23       	and	r24, r24
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__stack+0x883>
     d80:	54 cd       	rjmp	.-1368   	; 0x82a <__stack+0x32b>
     d82:	7a ca       	rjmp	.-2828   	; 0x278 <main+0xa0>
	}

	else
	{
	
		error++;     						// sum the failed attempts 
     d84:	de 01       	movw	r26, r28
     d86:	ad 57       	subi	r26, 0x7D	; 125
     d88:	bf 4f       	sbci	r27, 0xFF	; 255
     d8a:	fe 01       	movw	r30, r28
     d8c:	ed 57       	subi	r30, 0x7D	; 125
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
		if(error > 2)       					// if it's higher than 3 go to block function
     d9c:	fe 01       	movw	r30, r28
     d9e:	ed 57       	subi	r30, 0x7D	; 125
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	91 05       	cpc	r25, r1
     daa:	1c f0       	brlt	.+6      	; 0xdb2 <__stack+0x8b3>
		{
			block_system();     					//call block function
     dac:	0e 94 7f 07 	call	0xefe	; 0xefe <block_system>
     db0:	63 ca       	rjmp	.-2874   	; 0x278 <main+0xa0>
		}
		else
		{
			CLEAR_LCD
     db2:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_Clear>
			LCD_TEXT("FAIL")
     db6:	84 e2       	ldi	r24, 0x24	; 36
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	aa e7       	ldi	r26, 0x7A	; 122
     dc4:	b4 e4       	ldi	r27, 0x44	; 68
     dc6:	8b 87       	std	Y+11, r24	; 0x0b
     dc8:	9c 87       	std	Y+12, r25	; 0x0c
     dca:	ad 87       	std	Y+13, r26	; 0x0d
     dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dce:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	4a e7       	ldi	r20, 0x7A	; 122
     ddc:	53 e4       	ldi	r21, 0x43	; 67
     dde:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	8f 83       	std	Y+7, r24	; 0x07
     de8:	98 87       	std	Y+8, r25	; 0x08
     dea:	a9 87       	std	Y+9, r26	; 0x09
     dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dee:	6f 81       	ldd	r22, Y+7	; 0x07
     df0:	78 85       	ldd	r23, Y+8	; 0x08
     df2:	89 85       	ldd	r24, Y+9	; 0x09
     df4:	9a 85       	ldd	r25, Y+10	; 0x0a
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	5f e3       	ldi	r21, 0x3F	; 63
     dfe:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     e02:	88 23       	and	r24, r24
     e04:	2c f4       	brge	.+10     	; 0xe10 <__stack+0x911>
		__ticks = 1;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	8d 83       	std	Y+5, r24	; 0x05
     e0e:	3f c0       	rjmp	.+126    	; 0xe8e <__stack+0x98f>
	else if (__tmp > 65535)
     e10:	6f 81       	ldd	r22, Y+7	; 0x07
     e12:	78 85       	ldd	r23, Y+8	; 0x08
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	3f ef       	ldi	r19, 0xFF	; 255
     e1c:	4f e7       	ldi	r20, 0x7F	; 127
     e1e:	57 e4       	ldi	r21, 0x47	; 71
     e20:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     e24:	18 16       	cp	r1, r24
     e26:	4c f5       	brge	.+82     	; 0xe7a <__stack+0x97b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e28:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e2       	ldi	r20, 0x20	; 32
     e36:	51 e4       	ldi	r21, 0x41	; 65
     e38:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	0f c0       	rjmp	.+30     	; 0xe70 <__stack+0x971>
     e52:	89 e1       	ldi	r24, 0x19	; 25
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	8b 83       	std	Y+3, r24	; 0x03
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <__stack+0x95f>
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	69 f7       	brne	.-38     	; 0xe52 <__stack+0x953>
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <__stack+0x9a3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7a:	6f 81       	ldd	r22, Y+7	; 0x07
     e7c:	78 85       	ldd	r23, Y+8	; 0x08
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9e 83       	std	Y+6, r25	; 0x06
     e8c:	8d 83       	std	Y+5, r24	; 0x05
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <__stack+0x99b>
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			CLEAR_LCD
     ea2:	0e 94 84 08 	call	0x1108	; 0x1108 <LCD_Clear>
     ea6:	e8 c9       	rjmp	.-3120   	; 0x278 <main+0xa0>

00000ea8 <password_value>:
}}



int password_value (void)
{	
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <password_value+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <password_value+0x8>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
	int value1=0;										// Declares an int variable
     eb4:	1c 82       	std	Y+4, r1	; 0x04
     eb6:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t  mv=0;										// Declares a 16 bit unsigned variable
     eb8:	1a 82       	std	Y+2, r1	; 0x02
     eba:	19 82       	std	Y+1, r1	; 0x01
	ADMUX = 1;										// active Voltaje ADC
     ebc:	ec e7       	ldi	r30, 0x7C	; 124
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 83       	st	Z, r24
	mv = ADC_read();
     ec4:	0e 94 b1 00 	call	0x162	; 0x162 <ADC_read>
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
	mv=ADCW;     							//The AD conversion is executed and store in the variable mv
     ecc:	e8 e7       	ldi	r30, 0x78	; 120
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
	value1= mv/17 ; 						// the number is obtained
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	21 e1       	ldi	r18, 0x11	; 17
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	b9 01       	movw	r22, r18
     ee2:	0e 94 9f 12 	call	0x253e	; 0x253e <__udivmodhi4>
     ee6:	cb 01       	movw	r24, r22
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	8b 83       	std	Y+3, r24	; 0x03
return value1;									// return the number 
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <block_system>:

void block_system(void)           		    	// block funtion
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	LCD_TEXT("LOCK")
     f06:	89 e2       	ldi	r24, 0x29	; 41
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_puts>
	while(PINB & (1 << 7));						//wait until int 7 is activated 
     f0e:	e3 e2       	ldi	r30, 0x23	; 35
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 23       	and	r24, r24
     f16:	dc f3       	brlt	.-10     	; 0xf0e <block_system+0x10>
	cbi(PORTB,2);		                        //Turn alarm off				
     f18:	a5 e2       	ldi	r26, 0x25	; 37
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e2       	ldi	r30, 0x25	; 37
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8b 7f       	andi	r24, 0xFB	; 251
     f24:	8c 93       	st	X, r24
}
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <temperature>:

int temperature (void)
{	
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	60 97       	sbiw	r28, 0x10	; 16
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
	float t,r,s;					
	uint16_t T=0;									// Declares a 16 bit unsigned variable
     f40:	1c 82       	std	Y+4, r1	; 0x04
     f42:	1b 82       	std	Y+3, r1	; 0x03
	int x;
	ADMUX = 0;										// active Temperature ADC
     f44:	ec e7       	ldi	r30, 0x7C	; 124
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	10 82       	st	Z, r1
    T= ADC_read();									//The AD conversion is executed and store in the variable T
     f4a:	0e 94 b1 00 	call	0x162	; 0x162 <ADC_read>
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
 	T=ADCW;
     f52:	e8 e7       	ldi	r30, 0x78	; 120
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
    s=1024-T;
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	34 e0       	ldi	r19, 0x04	; 4
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	a9 01       	movw	r20, r18
     f68:	48 1b       	sub	r20, r24
     f6a:	59 0b       	sbc	r21, r25
     f6c:	ca 01       	movw	r24, r20
     f6e:	cc 01       	movw	r24, r24
     f70:	a0 e0       	ldi	r26, 0x00	; 0
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 00 10 	call	0x2000	; 0x2000 <__floatunsisf>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	8d 83       	std	Y+5, r24	; 0x05
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	af 83       	std	Y+7, r26	; 0x07
     f86:	b8 87       	std	Y+8, r27	; 0x08
	t=T/s;
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	cc 01       	movw	r24, r24
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 00 10 	call	0x2000	; 0x2000 <__floatunsisf>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	2d 81       	ldd	r18, Y+5	; 0x05
     fa4:	3e 81       	ldd	r19, Y+6	; 0x06
     fa6:	4f 81       	ldd	r20, Y+7	; 0x07
     fa8:	58 85       	ldd	r21, Y+8	; 0x08
     faa:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	8d 87       	std	Y+13, r24	; 0x0d
     fb4:	9e 87       	std	Y+14, r25	; 0x0e
     fb6:	af 87       	std	Y+15, r26	; 0x0f
     fb8:	b8 8b       	std	Y+16, r27	; 0x10
	r=log(t); 
     fba:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbe:	af 85       	ldd	r26, Y+15	; 0x0f
     fc0:	b8 89       	ldd	r27, Y+16	; 0x10
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 ef 12 	call	0x25de	; 0x25de <log>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	89 87       	std	Y+9, r24	; 0x09
     fd0:	9a 87       	std	Y+10, r25	; 0x0a
     fd2:	ab 87       	std	Y+11, r26	; 0x0b
     fd4:	bc 87       	std	Y+12, r27	; 0x0c
	x=(4250/(r+14.2617))-273;
     fd6:	69 85       	ldd	r22, Y+9	; 0x09
     fd8:	7a 85       	ldd	r23, Y+10	; 0x0a
     fda:	8b 85       	ldd	r24, Y+11	; 0x0b
     fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fde:	2c ee       	ldi	r18, 0xEC	; 236
     fe0:	3f e2       	ldi	r19, 0x2F	; 47
     fe2:	44 e6       	ldi	r20, 0x64	; 100
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__addsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	9c 01       	movw	r18, r24
     ff0:	ad 01       	movw	r20, r26
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 ed       	ldi	r23, 0xD0	; 208
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	95 e4       	ldi	r25, 0x45	; 69
     ffa:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e8       	ldi	r19, 0x80	; 128
    100a:	48 e8       	ldi	r20, 0x88	; 136
    100c:	53 e4       	ldi	r21, 0x43	; 67
    100e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__subsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fixsfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
	return x;									// return the number 
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
}
    102a:	60 96       	adiw	r28, 0x10	; 16
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <counter>:

int counter(int z)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <counter+0x6>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
	if(!(PINB & (1 << 7)) && (PINE & (1 << 5)))      // Counter people
    104a:	e3 e2       	ldi	r30, 0x23	; 35
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	88 23       	and	r24, r24
    1052:	7c f1       	brlt	.+94     	; 0x10b2 <counter+0x76>
    1054:	ec e2       	ldi	r30, 0x2C	; 44
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	80 72       	andi	r24, 0x20	; 32
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	31 f1       	breq	.+76     	; 0x10b2 <counter+0x76>
	{
	   while(!(PINB & (1 << 7)) && (PINE & (1 << 5)));
    1066:	e3 e2       	ldi	r30, 0x23	; 35
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 23       	and	r24, r24
    106e:	4c f0       	brlt	.+18     	; 0x1082 <counter+0x46>
    1070:	ec e2       	ldi	r30, 0x2C	; 44
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	80 72       	andi	r24, 0x20	; 32
    107c:	90 70       	andi	r25, 0x00	; 0
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	91 f7       	brne	.-28     	; 0x1066 <counter+0x2a>
	   if (!(PINE & (1 << 5)))
    1082:	ec e2       	ldi	r30, 0x2C	; 44
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	80 72       	andi	r24, 0x20	; 32
    108e:	90 70       	andi	r25, 0x00	; 0
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	29 f4       	brne	.+10     	; 0x109e <counter+0x62>
	       z++;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
	   if((PINB & (1 << 7)))  
    109e:	e3 e2       	ldi	r30, 0x23	; 35
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	88 23       	and	r24, r24
    10a6:	2c f4       	brge	.+10     	; 0x10b2 <counter+0x76>
		   z--;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
	 }
return z;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <LCD_Init>:
*   Purpose :       Initialize LCD_displayData buffer.
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    LCD_AllSegments(FALSE);                    // Clear segment buffer.
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <LCD_AllSegments>
    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);  //Set the LCD contrast level
    10ce:	e7 ee       	ldi	r30, 0xE7	; 231
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8f e0       	ldi	r24, 0x0F	; 15
    10d4:	80 83       	st	Z, r24
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0); // Select asynchronous clock source, enable all COM pins and enable all segment pins.
    10d6:	e5 ee       	ldi	r30, 0xE5	; 229
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	87 eb       	ldi	r24, 0xB7	; 183
    10dc:	80 83       	st	Z, r24
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);        // Set LCD prescaler to give a framerate of 32,0 Hz
    10de:	e6 ee       	ldi	r30, 0xE6	; 230
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	87 e0       	ldi	r24, 0x07	; 7
    10e4:	80 83       	st	Z, r24
    LCDCRA = (1<<LCDEN) | (1<<LCDAB);          // Enable LCD and set low power waveform
    10e6:	e4 ee       	ldi	r30, 0xE4	; 228
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 ec       	ldi	r24, 0xC0	; 192
    10ec:	80 83       	st	Z, r24
    LCDCRA |= (1<<LCDIE);                      //Enable LCD start of frame interrupt
    10ee:	a4 ee       	ldi	r26, 0xE4	; 228
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e4 ee       	ldi	r30, 0xE4	; 228
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 60       	ori	r24, 0x08	; 8
    10fa:	8c 93       	st	X, r24
    gLCD_Update_Required = FALSE;
    10fc:	10 92 38 02 	sts	0x0238, r1
    sei();
    1100:	78 94       	sei
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <LCD_Clear>:
/****************************************************************************
*	Function name : LCD_Clear
*	Purpose :		Clear the LCD
*****************************************************************************/
void LCD_Clear(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	0f 92       	push	r0
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
	enter=0;
    1112:	10 92 3c 02 	sts	0x023C, r1
	for (i=0; i<TEXTBUFFER_SIZE; i++)
    1116:	19 82       	std	Y+1, r1	; 0x01
    1118:	0b c0       	rjmp	.+22     	; 0x1130 <LCD_Clear+0x28>
    gTextBuffer[i] = ' ';		
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	ec 58       	subi	r30, 0x8C	; 140
    1124:	fd 4f       	sbci	r31, 0xFD	; 253
    1126:	80 e2       	ldi	r24, 0x20	; 32
    1128:	80 83       	st	Z, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i;
	enter=0;
	for (i=0; i<TEXTBUFFER_SIZE; i++)
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	89 31       	cpi	r24, 0x19	; 25
    1134:	90 f3       	brcs	.-28     	; 0x111a <LCD_Clear+0x12>
    gTextBuffer[i] = ' ';		
	
}
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <LCD_puts>:
*	Function name : LCD_puts
*	Parameters :	pStr: Pointer to the string
*	Purpose :		Writes a string to the LCD
*****************************************************************************/
void LCD_puts(char *pStr)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <LCD_puts+0x6>
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	9b 83       	std	Y+3, r25	; 0x03
    114c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i; 
	enter=1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 3c 02 	sts	0x023C, r24
	gLCD_Update_Required = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 38 02 	sts	0x0238, r24
	LCD_puts_f(PSTR(""));
    115a:	82 e2       	ldi	r24, 0x22	; 34
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_puts_f>
	enter=1;	
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 3c 02 	sts	0x023C, r24
	if(enter)// This condition is to enable the scroll function
    1168:	80 91 3c 02 	lds	r24, 0x023C
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <LCD_puts+0x34>
    1170:	43 c0       	rjmp	.+134    	; 0x11f8 <LCD_puts+0xba>
    {
    enter = 0;
    1172:	10 92 3c 02 	sts	0x023C, r1
 	while (gLCD_Update_Required);      // Wait for access to buffer
    1176:	80 91 38 02 	lds	r24, 0x0238
    117a:	88 23       	and	r24, r24
    117c:	e1 f7       	brne	.-8      	; 0x1176 <LCD_puts+0x38>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <LCD_puts+0x6a>
    gTextBuffer[i] = pStr[i];
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	48 2f       	mov	r20, r24
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	fc 01       	movw	r30, r24
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	80 81       	ld	r24, Z
    119a:	fa 01       	movw	r30, r20
    119c:	ec 58       	subi	r30, 0x8C	; 140
    119e:	fd 4f       	sbci	r31, 0xFD	; 253
    11a0:	80 83       	st	Z, r24
	if(enter)// This condition is to enable the scroll function
    {
    enter = 0;
 	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	fc 01       	movw	r30, r24
    11b4:	e2 0f       	add	r30, r18
    11b6:	f3 1f       	adc	r31, r19
    11b8:	80 81       	ld	r24, Z
    11ba:	88 23       	and	r24, r24
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <LCD_puts+0x86>
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	89 31       	cpi	r24, 0x19	; 25
    11c2:	f8 f2       	brcs	.-66     	; 0x1182 <LCD_puts+0x44>
    gTextBuffer[i] = pStr[i];
    
	gTextBuffer[i] = '\0';
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	fc 01       	movw	r30, r24
    11cc:	ec 58       	subi	r30, 0x8C	; 140
    11ce:	fd 4f       	sbci	r31, 0xFD	; 253
    11d0:	10 82       	st	Z, r1

    if (i > 6)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	87 30       	cpi	r24, 0x07	; 7
    11d6:	48 f0       	brcs	.+18     	; 0x11ea <LCD_puts+0xac>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	80 93 5f 02 	sts	0x025F, r24
        gScroll = 0;
    11de:	10 92 8d 02 	sts	0x028D, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	80 93 39 02 	sts	0x0239, r24
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <LCD_puts+0xb4>
    }
    else
    {
        gScrollMode = 0;        
    11ea:	10 92 5f 02 	sts	0x025F, r1
        gScroll = 0;
    11ee:	10 92 8d 02 	sts	0x028D, r1
    }

    gLCD_Update_Required = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 38 02 	sts	0x0238, r24
}
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <LCD_putc>:
/****************************************************************************
*	Function name : LCD_putc
*	Purpose :		Writes a character to the LCD
*****************************************************************************/
void LCD_putc(char character)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <LCD_putc+0x6>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t digit=0;
    1210:	19 82       	std	Y+1, r1	; 0x01
	enter=1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 3c 02 	sts	0x023C, r24
    LCD_puts_f(PSTR(""));
    1218:	83 e2       	ldi	r24, 0x23	; 35
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_puts_f>
	if (digit < TEXTBUFFER_SIZE)
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	89 31       	cpi	r24, 0x19	; 25
    1224:	40 f4       	brcc	.+16     	; 0x1236 <LCD_putc+0x32>
        gTextBuffer[digit] = character;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	fc 01       	movw	r30, r24
    122e:	ec 58       	subi	r30, 0x8C	; 140
    1230:	fd 4f       	sbci	r31, 0xFD	; 253
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <LCD_Colon>:
*
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    gColon = show;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	80 93 3b 02 	sts	0x023B, r24
}
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <LCD_UpdateRequired+0x6>
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	6a 83       	std	Y+2, r22	; 0x02

    while (gLCD_Update_Required);
    1268:	80 91 38 02 	lds	r24, 0x0238
    126c:	88 23       	and	r24, r24
    126e:	e1 f7       	brne	.-8      	; 0x1268 <LCD_UpdateRequired+0xe>
    
    gScrollMode = scrollmode;
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 93 5f 02 	sts	0x025F, r24
    gScroll = 0;
    1276:	10 92 8d 02 	sts	0x028D, r1

    gLCD_Update_Required = update;
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	80 93 38 02 	sts	0x0238, r24
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <LCD_FlashReset>:
*
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    gFlashTimer = 0;
    1292:	10 92 3a 02 	sts	0x023A, r1
}
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	2d 97       	sbiw	r28, 0x0d	; 13
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	8c 87       	std	Y+12, r24	; 0x0c
    12b2:	6d 87       	std	Y+13, r22	; 0x0d

    unsigned int seg = 0x0000;                  // Holds the segment pattern
    12b4:	1b 86       	std	Y+11, r1	; 0x0b
    12b6:	1a 86       	std	Y+10, r1	; 0x0a
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
    12b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ba:	86 30       	cpi	r24, 0x06	; 6
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <LCD_WriteDigit+0x24>
    12be:	68 c0       	rjmp	.+208    	; 0x1390 <LCD_WriteDigit+0xf4>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
    12c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c2:	8a 32       	cpi	r24, 0x2A	; 42
    12c4:	10 f1       	brcs	.+68     	; 0x130a <LCD_WriteDigit+0x6e>
    12c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c8:	8b 37       	cpi	r24, 0x7B	; 123
    12ca:	f8 f4       	brcc	.+62     	; 0x130a <LCD_WriteDigit+0x6e>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
    12cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ce:	81 36       	cpi	r24, 0x61	; 97
    12d0:	18 f0       	brcs	.+6      	; 0x12d8 <LCD_WriteDigit+0x3c>
            c &= ~0x20;                         // if necessarry
    12d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d4:	8f 7d       	andi	r24, 0xDF	; 223
    12d6:	8c 87       	std	Y+12, r24	; 0x0c

        c -= '*';
    12d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12da:	8a 52       	subi	r24, 0x2A	; 42
    12dc:	8c 87       	std	Y+12, r24	; 0x0c

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
    12de:	8c 85       	ldd	r24, Y+12	; 0x0c
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	8a 54       	subi	r24, 0x4A	; 74
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	fc 01       	movw	r30, r24
    12f6:	85 91       	lpm	r24, Z+
    12f8:	94 91       	lpm	r25, Z+
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	fc 83       	std	Y+4, r31	; 0x04
    1300:	eb 83       	std	Y+3, r30	; 0x03
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	9b 87       	std	Y+11, r25	; 0x0b
    1308:	8a 87       	std	Y+10, r24	; 0x0a
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
    130a:	8d 85       	ldd	r24, Y+13	; 0x0d
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	90 70       	andi	r25, 0x00	; 0
    1314:	88 23       	and	r24, r24
    1316:	19 f0       	breq	.+6      	; 0x131e <LCD_WriteDigit+0x82>
        mask = 0x0F;                // Digit 1, 3, 5
    1318:	8f e0       	ldi	r24, 0x0F	; 15
    131a:	89 87       	std	Y+9, r24	; 0x09
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <LCD_WriteDigit+0x86>
    else
        mask = 0xF0;                // Digit 0, 2, 4
    131e:	80 ef       	ldi	r24, 0xF0	; 240
    1320:	89 87       	std	Y+9, r24	; 0x09

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
    1322:	8d 85       	ldd	r24, Y+13	; 0x0d
    1324:	86 95       	lsr	r24
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	80 5a       	subi	r24, 0xA0	; 160
    132c:	9d 4f       	sbci	r25, 0xFD	; 253
    132e:	9f 83       	std	Y+7, r25	; 0x07
    1330:	8e 83       	std	Y+6, r24	; 0x06

    for (i = 0; i < 4; i++)
    1332:	1d 82       	std	Y+5, r1	; 0x05
    1334:	2a c0       	rjmp	.+84     	; 0x138a <LCD_WriteDigit+0xee>
    {
        nibble = seg & 0x000F;
    1336:	8a 85       	ldd	r24, Y+10	; 0x0a
    1338:	8f 70       	andi	r24, 0x0F	; 15
    133a:	88 87       	std	Y+8, r24	; 0x08
        seg >>= 4;
    133c:	8a 85       	ldd	r24, Y+10	; 0x0a
    133e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1340:	92 95       	swap	r25
    1342:	82 95       	swap	r24
    1344:	8f 70       	andi	r24, 0x0F	; 15
    1346:	89 27       	eor	r24, r25
    1348:	9f 70       	andi	r25, 0x0F	; 15
    134a:	89 27       	eor	r24, r25
    134c:	9b 87       	std	Y+11, r25	; 0x0b
    134e:	8a 87       	std	Y+10, r24	; 0x0a
        if (digit & 0x01)
    1350:	8d 85       	ldd	r24, Y+13	; 0x0d
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	81 70       	andi	r24, 0x01	; 1
    1358:	90 70       	andi	r25, 0x00	; 0
    135a:	88 23       	and	r24, r24
    135c:	21 f0       	breq	.+8      	; 0x1366 <LCD_WriteDigit+0xca>
            nibble <<= 4;
    135e:	88 85       	ldd	r24, Y+8	; 0x08
    1360:	82 95       	swap	r24
    1362:	80 7f       	andi	r24, 0xF0	; 240
    1364:	88 87       	std	Y+8, r24	; 0x08
        *ptr = (*ptr & mask) | nibble;
    1366:	ee 81       	ldd	r30, Y+6	; 0x06
    1368:	ff 81       	ldd	r31, Y+7	; 0x07
    136a:	90 81       	ld	r25, Z
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	98 23       	and	r25, r24
    1370:	88 85       	ldd	r24, Y+8	; 0x08
    1372:	89 2b       	or	r24, r25
    1374:	ee 81       	ldd	r30, Y+6	; 0x06
    1376:	ff 81       	ldd	r31, Y+7	; 0x07
    1378:	80 83       	st	Z, r24
        ptr += 5;
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	05 96       	adiw	r24, 0x05	; 5
    1380:	9f 83       	std	Y+7, r25	; 0x07
    1382:	8e 83       	std	Y+6, r24	; 0x06
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	98 f2       	brcs	.-90     	; 0x1336 <LCD_WriteDigit+0x9a>
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
    }
}
    1390:	2d 96       	adiw	r28, 0x0d	; 13
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <LCD_AllSegments>:
*
*   Purpose :       shows or hide all all LCD segments on the LCD
*
*****************************************************************************/
void LCD_AllSegments(char show)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <LCD_AllSegments+0x6>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;

    if (show)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 23       	and	r24, r24
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <LCD_AllSegments+0x16>
        show = 0xFF;
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	8a 83       	std	Y+2, r24	; 0x02

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
    13b8:	19 82       	std	Y+1, r1	; 0x01
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <LCD_AllSegments+0x30>
        *(LCD_Data + i) = show;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	e0 5a       	subi	r30, 0xA0	; 160
    13c6:	fd 4f       	sbci	r31, 0xFD	; 253
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	84 31       	cpi	r24, 0x14	; 20
    13d6:	90 f3       	brcs	.-28     	; 0x13bc <LCD_AllSegments+0x1a>
        *(LCD_Data + i) = show;
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	2f 93       	push	r18
    13ee:	3f 93       	push	r19
    13f0:	4f 93       	push	r20
    13f2:	5f 93       	push	r21
    13f4:	6f 93       	push	r22
    13f6:	7f 93       	push	r23
    13f8:	8f 93       	push	r24
    13fa:	9f 93       	push	r25
    13fc:	af 93       	push	r26
    13fe:	bf 93       	push	r27
    1400:	ef 93       	push	r30
    1402:	ff 93       	push	r31
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <__vector_22+0x28>
    140a:	00 d0       	rcall	.+0      	; 0x140c <__vector_22+0x2a>
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    char c_flash;
    char flash;

    char EOL;
    unsigned char i;
    LCD_timer--;                    // Decreased every LCD frame
    1412:	80 91 2e 01 	lds	r24, 0x012E
    1416:	81 50       	subi	r24, 0x01	; 1
    1418:	80 93 2e 01 	sts	0x012E, r24

    if (gScrollMode)
    141c:	80 91 5f 02 	lds	r24, 0x025F
    1420:	88 23       	and	r24, r24
    1422:	91 f0       	breq	.+36     	; 0x1448 <__vector_22+0x66>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
    1424:	80 91 2e 01 	lds	r24, 0x012E
    1428:	88 23       	and	r24, r24
    142a:	81 f4       	brne	.+32     	; 0x144c <__vector_22+0x6a>
        {
            if (gLCD_Start_Scroll_Timer == 0)
    142c:	80 91 39 02 	lds	r24, 0x0239
    1430:	88 23       	and	r24, r24
    1432:	21 f4       	brne	.+8      	; 0x143c <__vector_22+0x5a>
            {
                gLCD_Update_Required = TRUE;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 38 02 	sts	0x0238, r24
    143a:	08 c0       	rjmp	.+16     	; 0x144c <__vector_22+0x6a>
            }
            else
                gLCD_Start_Scroll_Timer--;
    143c:	80 91 39 02 	lds	r24, 0x0239
    1440:	81 50       	subi	r24, 0x01	; 1
    1442:	80 93 39 02 	sts	0x0239, r24
    1446:	02 c0       	rjmp	.+4      	; 0x144c <__vector_22+0x6a>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
    1448:	10 92 8d 02 	sts	0x028D, r1
    }


    EOL = FALSE;
    144c:	1a 82       	std	Y+2, r1	; 0x02
    if (gLCD_Update_Required == TRUE)
    144e:	80 91 38 02 	lds	r24, 0x0238
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	09 f0       	breq	.+2      	; 0x1458 <__vector_22+0x76>
    1456:	81 c0       	rjmp	.+258    	; 0x155a <__vector_22+0x178>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
    1458:	80 91 3a 02 	lds	r24, 0x023A
    145c:	85 30       	cpi	r24, 0x05	; 5
    145e:	10 f4       	brcc	.+4      	; 0x1464 <__vector_22+0x82>
            flash = 0;
    1460:	1b 82       	std	Y+3, r1	; 0x03
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <__vector_22+0x86>
        else
            flash = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	8b 83       	std	Y+3, r24	; 0x03

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
    1468:	19 82       	std	Y+1, r1	; 0x01
    146a:	43 c0       	rjmp	.+134    	; 0x14f2 <__vector_22+0x110>
        {
            if ((gScroll+i) >= 0 && (!EOL))
    146c:	80 91 8d 02 	lds	r24, 0x028D
    1470:	28 2f       	mov	r18, r24
    1472:	33 27       	eor	r19, r19
    1474:	27 fd       	sbrc	r18, 7
    1476:	30 95       	com	r19
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	99 23       	and	r25, r25
    1484:	14 f1       	brlt	.+68     	; 0x14ca <__vector_22+0xe8>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	88 23       	and	r24, r24
    148a:	f9 f4       	brne	.+62     	; 0x14ca <__vector_22+0xe8>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	80 91 8d 02 	lds	r24, 0x028D
    1496:	99 27       	eor	r25, r25
    1498:	87 fd       	sbrc	r24, 7
    149a:	90 95       	com	r25
    149c:	82 0f       	add	r24, r18
    149e:	93 1f       	adc	r25, r19
    14a0:	fc 01       	movw	r30, r24
    14a2:	ec 58       	subi	r30, 0x8C	; 140
    14a4:	fd 4f       	sbci	r31, 0xFD	; 253
    14a6:	80 81       	ld	r24, Z
    14a8:	8d 83       	std	Y+5, r24	; 0x05
                c_flash = c & 0x80 ? 1 : 0;
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	1c 82       	std	Y+4, r1	; 0x04
    14ae:	88 23       	and	r24, r24
    14b0:	14 f4       	brge	.+4      	; 0x14b6 <__vector_22+0xd4>
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	8c 83       	std	Y+4, r24	; 0x04
                c = c & 0x7F;
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	8f 77       	andi	r24, 0x7F	; 127
    14ba:	8d 83       	std	Y+5, r24	; 0x05

                if (c == '\0')
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	88 23       	and	r24, r24
    14c0:	31 f4       	brne	.+12     	; 0x14ce <__vector_22+0xec>
                    EOL = i+1;      // End of character data
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	8a 83       	std	Y+2, r24	; 0x02
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <__vector_22+0xec>
            }
            else
                c = ' ';
    14ca:	80 e2       	ldi	r24, 0x20	; 32
    14cc:	8d 83       	std	Y+5, r24	; 0x05

            // Check if this character is flashing

            if (c_flash && flash)
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	88 23       	and	r24, r24
    14d2:	41 f0       	breq	.+16     	; 0x14e4 <__vector_22+0x102>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	88 23       	and	r24, r24
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <__vector_22+0x102>
                LCD_WriteDigit(' ', i);
    14da:	80 e2       	ldi	r24, 0x20	; 32
    14dc:	69 81       	ldd	r22, Y+1	; 0x01
    14de:	0e 94 4e 09 	call	0x129c	; 0x129c <LCD_WriteDigit>
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <__vector_22+0x10a>
            else
                LCD_WriteDigit(c, i);
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	69 81       	ldd	r22, Y+1	; 0x01
    14e8:	0e 94 4e 09 	call	0x129c	; 0x129c <LCD_WriteDigit>
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	86 30       	cpi	r24, 0x06	; 6
    14f6:	08 f4       	brcc	.+2      	; 0x14fa <__vector_22+0x118>
    14f8:	b9 cf       	rjmp	.-142    	; 0x146c <__vector_22+0x8a>
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
    14fa:	19 82       	std	Y+1, r1	; 0x01
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <__vector_22+0x13e>
            *(pLCDREG + i) = *(LCD_Data+i);
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	dc 01       	movw	r26, r24
    1506:	a4 51       	subi	r26, 0x14	; 20
    1508:	bf 4f       	sbci	r27, 0xFF	; 255
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	e0 5a       	subi	r30, 0xA0	; 160
    1514:	fd 4f       	sbci	r31, 0xFD	; 253
    1516:	80 81       	ld	r24, Z
    1518:	8c 93       	st	X, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	84 31       	cpi	r24, 0x14	; 20
    1524:	60 f3       	brcs	.-40     	; 0x14fe <__vector_22+0x11c>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
    1526:	80 91 3b 02 	lds	r24, 0x023B
    152a:	88 23       	and	r24, r24
    152c:	29 f0       	breq	.+10     	; 0x1538 <__vector_22+0x156>
            *(pLCDREG + 8) = 0x01;
    152e:	e4 ef       	ldi	r30, 0xF4	; 244
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	80 83       	st	Z, r24
    1536:	03 c0       	rjmp	.+6      	; 0x153e <__vector_22+0x15c>
        else
            *(pLCDREG + 8) = 0x00;
    1538:	e4 ef       	ldi	r30, 0xF4	; 244
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	10 82       	st	Z, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	21 f4       	brne	.+8      	; 0x154c <__vector_22+0x16a>
            gScroll = -6;
    1544:	8a ef       	ldi	r24, 0xFA	; 250
    1546:	80 93 8d 02 	sts	0x028D, r24
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <__vector_22+0x174>
        else
            gScroll++;
    154c:	80 91 8d 02 	lds	r24, 0x028D
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	80 93 8d 02 	sts	0x028D, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
    1556:	10 92 38 02 	sts	0x0238, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
    155a:	80 91 2e 01 	lds	r24, 0x012E
    155e:	88 23       	and	r24, r24
    1560:	19 f4       	brne	.+6      	; 0x1568 <__vector_22+0x186>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	80 93 2e 01 	sts	0x012E, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
    1568:	80 91 3a 02 	lds	r24, 0x023A
    156c:	8a 30       	cpi	r24, 0x0A	; 10
    156e:	19 f4       	brne	.+6      	; 0x1576 <__vector_22+0x194>
        gFlashTimer= 0;
    1570:	10 92 3a 02 	sts	0x023A, r1
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <__vector_22+0x19e>
    else
        gFlashTimer++;
    1576:	80 91 3a 02 	lds	r24, 0x023A
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 3a 02 	sts	0x023A, r24

}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr )
{	
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	29 97       	sbiw	r28, 0x09	; 9
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	99 87       	std	Y+9, r25	; 0x09
    15c6:	88 87       	std	Y+8, r24	; 0x08
uint8_t i;
////////////////////////////////
enter = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 3c 02 	sts	0x023C, r24
	if(enter)
    15ce:	80 91 3c 02 	lds	r24, 0x023C
    15d2:	88 23       	and	r24, r24
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <LCD_puts_f+0x28>
    15d6:	4d c0       	rjmp	.+154    	; 0x1672 <LCD_puts_f+0xc2>
    {
        enter = 0;
    15d8:	10 92 3c 02 	sts	0x023C, r1
    //} CLOSE DOWN
////////////////////////////////
    // char i;


    while (gLCD_Update_Required);      // Wait for access to buffer
    15dc:	80 91 38 02 	lds	r24, 0x0238
    15e0:	88 23       	and	r24, r24
    15e2:	e1 f7       	brne	.-8      	; 0x15dc <LCD_puts_f+0x2c>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
    15e4:	1f 82       	std	Y+7, r1	; 0x07
    15e6:	18 c0       	rjmp	.+48     	; 0x1618 <LCD_puts_f+0x68>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	48 2f       	mov	r20, r24
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	8f 81       	ldd	r24, Y+7	; 0x07
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	88 85       	ldd	r24, Y+8	; 0x08
    15f6:	99 85       	ldd	r25, Y+9	; 0x09
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	ed 81       	ldd	r30, Y+5	; 0x05
    1602:	fe 81       	ldd	r31, Y+6	; 0x06
    1604:	84 91       	lpm	r24, Z+
    1606:	8c 83       	std	Y+4, r24	; 0x04
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	fa 01       	movw	r30, r20
    160c:	ec 58       	subi	r30, 0x8C	; 140
    160e:	fd 4f       	sbci	r31, 0xFD	; 253
    1610:	80 83       	st	Z, r24


    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	8f 83       	std	Y+7, r24	; 0x07
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	88 85       	ldd	r24, Y+8	; 0x08
    1620:	99 85       	ldd	r25, Y+9	; 0x09
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	9b 83       	std	Y+3, r25	; 0x03
    1628:	8a 83       	std	Y+2, r24	; 0x02
    162a:	ea 81       	ldd	r30, Y+2	; 0x02
    162c:	fb 81       	ldd	r31, Y+3	; 0x03
    162e:	84 91       	lpm	r24, Z+
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	88 23       	and	r24, r24
    1636:	19 f0       	breq	.+6      	; 0x163e <LCD_puts_f+0x8e>
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	89 31       	cpi	r24, 0x19	; 25
    163c:	a8 f2       	brcs	.-86     	; 0x15e8 <LCD_puts_f+0x38>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
    163e:	8f 81       	ldd	r24, Y+7	; 0x07
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	fc 01       	movw	r30, r24
    1646:	ec 58       	subi	r30, 0x8C	; 140
    1648:	fd 4f       	sbci	r31, 0xFD	; 253
    164a:	10 82       	st	Z, r1

    if (i > 6)
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
    164e:	87 30       	cpi	r24, 0x07	; 7
    1650:	48 f0       	brcs	.+18     	; 0x1664 <LCD_puts_f+0xb4>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 5f 02 	sts	0x025F, r24
        gScroll = 0;
    1658:	10 92 8d 02 	sts	0x028D, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	80 93 39 02 	sts	0x0239, r24
    1662:	04 c0       	rjmp	.+8      	; 0x166c <LCD_puts_f+0xbc>
    }
    else
    {
        gScrollMode = 0;        
    1664:	10 92 5f 02 	sts	0x025F, r1
        gScroll = 0;
    1668:	10 92 8d 02 	sts	0x028D, r1
    }

    gLCD_Update_Required = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 38 02 	sts	0x0238, r24
}
}//CLOSE DOWN
    1672:	29 96       	adiw	r28, 0x09	; 9
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <__fixunssfsi>:
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	7b 01       	movw	r14, r22
    168e:	8c 01       	movw	r16, r24
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	5f e4       	ldi	r21, 0x4F	; 79
    1698:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
    169c:	88 23       	and	r24, r24
    169e:	8c f0       	brlt	.+34     	; 0x16c2 <__fixunssfsi+0x3e>
    16a0:	c8 01       	movw	r24, r16
    16a2:	b7 01       	movw	r22, r14
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	5f e4       	ldi	r21, 0x4F	; 79
    16ac:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__subsf3>
    16b0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fixsfsi>
    16b4:	9b 01       	movw	r18, r22
    16b6:	ac 01       	movw	r20, r24
    16b8:	20 50       	subi	r18, 0x00	; 0
    16ba:	30 40       	sbci	r19, 0x00	; 0
    16bc:	40 40       	sbci	r20, 0x00	; 0
    16be:	50 48       	sbci	r21, 0x80	; 128
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <__fixunssfsi+0x4a>
    16c2:	c8 01       	movw	r24, r16
    16c4:	b7 01       	movw	r22, r14
    16c6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fixsfsi>
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	b9 01       	movw	r22, r18
    16d0:	ca 01       	movw	r24, r20
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	08 95       	ret

000016dc <_fpadd_parts>:
    16dc:	a0 e0       	ldi	r26, 0x00	; 0
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e4 e7       	ldi	r30, 0x74	; 116
    16e2:	fb e0       	ldi	r31, 0x0B	; 11
    16e4:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__prologue_saves__>
    16e8:	dc 01       	movw	r26, r24
    16ea:	2b 01       	movw	r4, r22
    16ec:	fa 01       	movw	r30, r20
    16ee:	9c 91       	ld	r25, X
    16f0:	92 30       	cpi	r25, 0x02	; 2
    16f2:	08 f4       	brcc	.+2      	; 0x16f6 <_fpadd_parts+0x1a>
    16f4:	39 c1       	rjmp	.+626    	; 0x1968 <_fpadd_parts+0x28c>
    16f6:	eb 01       	movw	r28, r22
    16f8:	88 81       	ld	r24, Y
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <_fpadd_parts+0x24>
    16fe:	33 c1       	rjmp	.+614    	; 0x1966 <_fpadd_parts+0x28a>
    1700:	94 30       	cpi	r25, 0x04	; 4
    1702:	69 f4       	brne	.+26     	; 0x171e <_fpadd_parts+0x42>
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	09 f0       	breq	.+2      	; 0x170a <_fpadd_parts+0x2e>
    1708:	2f c1       	rjmp	.+606    	; 0x1968 <_fpadd_parts+0x28c>
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	9c 91       	ld	r25, X
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	98 17       	cp	r25, r24
    1714:	09 f4       	brne	.+2      	; 0x1718 <_fpadd_parts+0x3c>
    1716:	28 c1       	rjmp	.+592    	; 0x1968 <_fpadd_parts+0x28c>
    1718:	a0 e3       	ldi	r26, 0x30	; 48
    171a:	b1 e0       	ldi	r27, 0x01	; 1
    171c:	25 c1       	rjmp	.+586    	; 0x1968 <_fpadd_parts+0x28c>
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	09 f4       	brne	.+2      	; 0x1724 <_fpadd_parts+0x48>
    1722:	21 c1       	rjmp	.+578    	; 0x1966 <_fpadd_parts+0x28a>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	a9 f4       	brne	.+42     	; 0x1752 <_fpadd_parts+0x76>
    1728:	92 30       	cpi	r25, 0x02	; 2
    172a:	09 f0       	breq	.+2      	; 0x172e <_fpadd_parts+0x52>
    172c:	1d c1       	rjmp	.+570    	; 0x1968 <_fpadd_parts+0x28c>
    172e:	9a 01       	movw	r18, r20
    1730:	ad 01       	movw	r20, r26
    1732:	88 e0       	ldi	r24, 0x08	; 8
    1734:	ea 01       	movw	r28, r20
    1736:	09 90       	ld	r0, Y+
    1738:	ae 01       	movw	r20, r28
    173a:	e9 01       	movw	r28, r18
    173c:	09 92       	st	Y+, r0
    173e:	9e 01       	movw	r18, r28
    1740:	81 50       	subi	r24, 0x01	; 1
    1742:	c1 f7       	brne	.-16     	; 0x1734 <_fpadd_parts+0x58>
    1744:	e2 01       	movw	r28, r4
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	11 96       	adiw	r26, 0x01	; 1
    174a:	9c 91       	ld	r25, X
    174c:	89 23       	and	r24, r25
    174e:	81 83       	std	Z+1, r24	; 0x01
    1750:	08 c1       	rjmp	.+528    	; 0x1962 <_fpadd_parts+0x286>
    1752:	92 30       	cpi	r25, 0x02	; 2
    1754:	09 f4       	brne	.+2      	; 0x1758 <_fpadd_parts+0x7c>
    1756:	07 c1       	rjmp	.+526    	; 0x1966 <_fpadd_parts+0x28a>
    1758:	12 96       	adiw	r26, 0x02	; 2
    175a:	2d 90       	ld	r2, X+
    175c:	3c 90       	ld	r3, X
    175e:	13 97       	sbiw	r26, 0x03	; 3
    1760:	eb 01       	movw	r28, r22
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	9b 81       	ldd	r25, Y+3	; 0x03
    1766:	14 96       	adiw	r26, 0x04	; 4
    1768:	ad 90       	ld	r10, X+
    176a:	bd 90       	ld	r11, X+
    176c:	cd 90       	ld	r12, X+
    176e:	dc 90       	ld	r13, X
    1770:	17 97       	sbiw	r26, 0x07	; 7
    1772:	ec 80       	ldd	r14, Y+4	; 0x04
    1774:	fd 80       	ldd	r15, Y+5	; 0x05
    1776:	0e 81       	ldd	r16, Y+6	; 0x06
    1778:	1f 81       	ldd	r17, Y+7	; 0x07
    177a:	91 01       	movw	r18, r2
    177c:	28 1b       	sub	r18, r24
    177e:	39 0b       	sbc	r19, r25
    1780:	b9 01       	movw	r22, r18
    1782:	37 ff       	sbrs	r19, 7
    1784:	04 c0       	rjmp	.+8      	; 0x178e <_fpadd_parts+0xb2>
    1786:	66 27       	eor	r22, r22
    1788:	77 27       	eor	r23, r23
    178a:	62 1b       	sub	r22, r18
    178c:	73 0b       	sbc	r23, r19
    178e:	60 32       	cpi	r22, 0x20	; 32
    1790:	71 05       	cpc	r23, r1
    1792:	0c f0       	brlt	.+2      	; 0x1796 <_fpadd_parts+0xba>
    1794:	61 c0       	rjmp	.+194    	; 0x1858 <_fpadd_parts+0x17c>
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	6c f5       	brge	.+90     	; 0x17f6 <_fpadd_parts+0x11a>
    179c:	37 01       	movw	r6, r14
    179e:	48 01       	movw	r8, r16
    17a0:	06 2e       	mov	r0, r22
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <_fpadd_parts+0xd0>
    17a4:	96 94       	lsr	r9
    17a6:	87 94       	ror	r8
    17a8:	77 94       	ror	r7
    17aa:	67 94       	ror	r6
    17ac:	0a 94       	dec	r0
    17ae:	d2 f7       	brpl	.-12     	; 0x17a4 <_fpadd_parts+0xc8>
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <_fpadd_parts+0xe6>
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	44 1f       	adc	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	6a 95       	dec	r22
    17c4:	d2 f7       	brpl	.-12     	; 0x17ba <_fpadd_parts+0xde>
    17c6:	21 50       	subi	r18, 0x01	; 1
    17c8:	30 40       	sbci	r19, 0x00	; 0
    17ca:	40 40       	sbci	r20, 0x00	; 0
    17cc:	50 40       	sbci	r21, 0x00	; 0
    17ce:	2e 21       	and	r18, r14
    17d0:	3f 21       	and	r19, r15
    17d2:	40 23       	and	r20, r16
    17d4:	51 23       	and	r21, r17
    17d6:	21 15       	cp	r18, r1
    17d8:	31 05       	cpc	r19, r1
    17da:	41 05       	cpc	r20, r1
    17dc:	51 05       	cpc	r21, r1
    17de:	21 f0       	breq	.+8      	; 0x17e8 <_fpadd_parts+0x10c>
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	79 01       	movw	r14, r18
    17ea:	8a 01       	movw	r16, r20
    17ec:	e6 28       	or	r14, r6
    17ee:	f7 28       	or	r15, r7
    17f0:	08 29       	or	r16, r8
    17f2:	19 29       	or	r17, r9
    17f4:	3c c0       	rjmp	.+120    	; 0x186e <_fpadd_parts+0x192>
    17f6:	23 2b       	or	r18, r19
    17f8:	d1 f1       	breq	.+116    	; 0x186e <_fpadd_parts+0x192>
    17fa:	26 0e       	add	r2, r22
    17fc:	37 1e       	adc	r3, r23
    17fe:	35 01       	movw	r6, r10
    1800:	46 01       	movw	r8, r12
    1802:	06 2e       	mov	r0, r22
    1804:	04 c0       	rjmp	.+8      	; 0x180e <_fpadd_parts+0x132>
    1806:	96 94       	lsr	r9
    1808:	87 94       	ror	r8
    180a:	77 94       	ror	r7
    180c:	67 94       	ror	r6
    180e:	0a 94       	dec	r0
    1810:	d2 f7       	brpl	.-12     	; 0x1806 <_fpadd_parts+0x12a>
    1812:	21 e0       	ldi	r18, 0x01	; 1
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <_fpadd_parts+0x148>
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	44 1f       	adc	r20, r20
    1822:	55 1f       	adc	r21, r21
    1824:	6a 95       	dec	r22
    1826:	d2 f7       	brpl	.-12     	; 0x181c <_fpadd_parts+0x140>
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	30 40       	sbci	r19, 0x00	; 0
    182c:	40 40       	sbci	r20, 0x00	; 0
    182e:	50 40       	sbci	r21, 0x00	; 0
    1830:	2a 21       	and	r18, r10
    1832:	3b 21       	and	r19, r11
    1834:	4c 21       	and	r20, r12
    1836:	5d 21       	and	r21, r13
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	41 05       	cpc	r20, r1
    183e:	51 05       	cpc	r21, r1
    1840:	21 f0       	breq	.+8      	; 0x184a <_fpadd_parts+0x16e>
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	59 01       	movw	r10, r18
    184c:	6a 01       	movw	r12, r20
    184e:	a6 28       	or	r10, r6
    1850:	b7 28       	or	r11, r7
    1852:	c8 28       	or	r12, r8
    1854:	d9 28       	or	r13, r9
    1856:	0b c0       	rjmp	.+22     	; 0x186e <_fpadd_parts+0x192>
    1858:	82 15       	cp	r24, r2
    185a:	93 05       	cpc	r25, r3
    185c:	2c f0       	brlt	.+10     	; 0x1868 <_fpadd_parts+0x18c>
    185e:	1c 01       	movw	r2, r24
    1860:	aa 24       	eor	r10, r10
    1862:	bb 24       	eor	r11, r11
    1864:	65 01       	movw	r12, r10
    1866:	03 c0       	rjmp	.+6      	; 0x186e <_fpadd_parts+0x192>
    1868:	ee 24       	eor	r14, r14
    186a:	ff 24       	eor	r15, r15
    186c:	87 01       	movw	r16, r14
    186e:	11 96       	adiw	r26, 0x01	; 1
    1870:	9c 91       	ld	r25, X
    1872:	d2 01       	movw	r26, r4
    1874:	11 96       	adiw	r26, 0x01	; 1
    1876:	8c 91       	ld	r24, X
    1878:	98 17       	cp	r25, r24
    187a:	09 f4       	brne	.+2      	; 0x187e <_fpadd_parts+0x1a2>
    187c:	45 c0       	rjmp	.+138    	; 0x1908 <_fpadd_parts+0x22c>
    187e:	99 23       	and	r25, r25
    1880:	39 f0       	breq	.+14     	; 0x1890 <_fpadd_parts+0x1b4>
    1882:	a8 01       	movw	r20, r16
    1884:	97 01       	movw	r18, r14
    1886:	2a 19       	sub	r18, r10
    1888:	3b 09       	sbc	r19, r11
    188a:	4c 09       	sbc	r20, r12
    188c:	5d 09       	sbc	r21, r13
    188e:	06 c0       	rjmp	.+12     	; 0x189c <_fpadd_parts+0x1c0>
    1890:	a6 01       	movw	r20, r12
    1892:	95 01       	movw	r18, r10
    1894:	2e 19       	sub	r18, r14
    1896:	3f 09       	sbc	r19, r15
    1898:	40 0b       	sbc	r20, r16
    189a:	51 0b       	sbc	r21, r17
    189c:	57 fd       	sbrc	r21, 7
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <_fpadd_parts+0x1d4>
    18a0:	11 82       	std	Z+1, r1	; 0x01
    18a2:	33 82       	std	Z+3, r3	; 0x03
    18a4:	22 82       	std	Z+2, r2	; 0x02
    18a6:	24 83       	std	Z+4, r18	; 0x04
    18a8:	35 83       	std	Z+5, r19	; 0x05
    18aa:	46 83       	std	Z+6, r20	; 0x06
    18ac:	57 83       	std	Z+7, r21	; 0x07
    18ae:	1d c0       	rjmp	.+58     	; 0x18ea <_fpadd_parts+0x20e>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	81 83       	std	Z+1, r24	; 0x01
    18b4:	33 82       	std	Z+3, r3	; 0x03
    18b6:	22 82       	std	Z+2, r2	; 0x02
    18b8:	88 27       	eor	r24, r24
    18ba:	99 27       	eor	r25, r25
    18bc:	dc 01       	movw	r26, r24
    18be:	82 1b       	sub	r24, r18
    18c0:	93 0b       	sbc	r25, r19
    18c2:	a4 0b       	sbc	r26, r20
    18c4:	b5 0b       	sbc	r27, r21
    18c6:	84 83       	std	Z+4, r24	; 0x04
    18c8:	95 83       	std	Z+5, r25	; 0x05
    18ca:	a6 83       	std	Z+6, r26	; 0x06
    18cc:	b7 83       	std	Z+7, r27	; 0x07
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <_fpadd_parts+0x20e>
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	44 1f       	adc	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	24 83       	std	Z+4, r18	; 0x04
    18da:	35 83       	std	Z+5, r19	; 0x05
    18dc:	46 83       	std	Z+6, r20	; 0x06
    18de:	57 83       	std	Z+7, r21	; 0x07
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	93 83       	std	Z+3, r25	; 0x03
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	24 81       	ldd	r18, Z+4	; 0x04
    18ec:	35 81       	ldd	r19, Z+5	; 0x05
    18ee:	46 81       	ldd	r20, Z+6	; 0x06
    18f0:	57 81       	ldd	r21, Z+7	; 0x07
    18f2:	da 01       	movw	r26, r20
    18f4:	c9 01       	movw	r24, r18
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	a1 09       	sbc	r26, r1
    18fa:	b1 09       	sbc	r27, r1
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	af 4f       	sbci	r26, 0xFF	; 255
    1902:	bf 43       	sbci	r27, 0x3F	; 63
    1904:	28 f3       	brcs	.-54     	; 0x18d0 <_fpadd_parts+0x1f4>
    1906:	0b c0       	rjmp	.+22     	; 0x191e <_fpadd_parts+0x242>
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	33 82       	std	Z+3, r3	; 0x03
    190c:	22 82       	std	Z+2, r2	; 0x02
    190e:	ea 0c       	add	r14, r10
    1910:	fb 1c       	adc	r15, r11
    1912:	0c 1d       	adc	r16, r12
    1914:	1d 1d       	adc	r17, r13
    1916:	e4 82       	std	Z+4, r14	; 0x04
    1918:	f5 82       	std	Z+5, r15	; 0x05
    191a:	06 83       	std	Z+6, r16	; 0x06
    191c:	17 83       	std	Z+7, r17	; 0x07
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	80 83       	st	Z, r24
    1922:	24 81       	ldd	r18, Z+4	; 0x04
    1924:	35 81       	ldd	r19, Z+5	; 0x05
    1926:	46 81       	ldd	r20, Z+6	; 0x06
    1928:	57 81       	ldd	r21, Z+7	; 0x07
    192a:	57 ff       	sbrs	r21, 7
    192c:	1a c0       	rjmp	.+52     	; 0x1962 <_fpadd_parts+0x286>
    192e:	c9 01       	movw	r24, r18
    1930:	aa 27       	eor	r26, r26
    1932:	97 fd       	sbrc	r25, 7
    1934:	a0 95       	com	r26
    1936:	ba 2f       	mov	r27, r26
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	90 70       	andi	r25, 0x00	; 0
    193c:	a0 70       	andi	r26, 0x00	; 0
    193e:	b0 70       	andi	r27, 0x00	; 0
    1940:	56 95       	lsr	r21
    1942:	47 95       	ror	r20
    1944:	37 95       	ror	r19
    1946:	27 95       	ror	r18
    1948:	82 2b       	or	r24, r18
    194a:	93 2b       	or	r25, r19
    194c:	a4 2b       	or	r26, r20
    194e:	b5 2b       	or	r27, r21
    1950:	84 83       	std	Z+4, r24	; 0x04
    1952:	95 83       	std	Z+5, r25	; 0x05
    1954:	a6 83       	std	Z+6, r26	; 0x06
    1956:	b7 83       	std	Z+7, r27	; 0x07
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	93 83       	std	Z+3, r25	; 0x03
    1960:	82 83       	std	Z+2, r24	; 0x02
    1962:	df 01       	movw	r26, r30
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <_fpadd_parts+0x28c>
    1966:	d2 01       	movw	r26, r4
    1968:	cd 01       	movw	r24, r26
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	e2 e1       	ldi	r30, 0x12	; 18
    1970:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__epilogue_restores__>

00001974 <__subsf3>:
    1974:	a0 e2       	ldi	r26, 0x20	; 32
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e0 ec       	ldi	r30, 0xC0	; 192
    197a:	fc e0       	ldi	r31, 0x0C	; 12
    197c:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x18>
    1980:	69 83       	std	Y+1, r22	; 0x01
    1982:	7a 83       	std	Y+2, r23	; 0x02
    1984:	8b 83       	std	Y+3, r24	; 0x03
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	2d 83       	std	Y+5, r18	; 0x05
    198a:	3e 83       	std	Y+6, r19	; 0x06
    198c:	4f 83       	std	Y+7, r20	; 0x07
    198e:	58 87       	std	Y+8, r21	; 0x08
    1990:	e9 e0       	ldi	r30, 0x09	; 9
    1992:	ee 2e       	mov	r14, r30
    1994:	f1 2c       	mov	r15, r1
    1996:	ec 0e       	add	r14, r28
    1998:	fd 1e       	adc	r15, r29
    199a:	ce 01       	movw	r24, r28
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	b7 01       	movw	r22, r14
    19a0:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    19a4:	8e 01       	movw	r16, r28
    19a6:	0f 5e       	subi	r16, 0xEF	; 239
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	ce 01       	movw	r24, r28
    19ac:	05 96       	adiw	r24, 0x05	; 5
    19ae:	b8 01       	movw	r22, r16
    19b0:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    19b4:	8a 89       	ldd	r24, Y+18	; 0x12
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	89 27       	eor	r24, r25
    19ba:	8a 8b       	std	Y+18, r24	; 0x12
    19bc:	c7 01       	movw	r24, r14
    19be:	b8 01       	movw	r22, r16
    19c0:	ae 01       	movw	r20, r28
    19c2:	47 5e       	subi	r20, 0xE7	; 231
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_fpadd_parts>
    19ca:	0e 94 c8 10 	call	0x2190	; 0x2190 <__pack_f>
    19ce:	a0 96       	adiw	r28, 0x20	; 32
    19d0:	e6 e0       	ldi	r30, 0x06	; 6
    19d2:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x18>

000019d6 <__addsf3>:
    19d6:	a0 e2       	ldi	r26, 0x20	; 32
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e1 ef       	ldi	r30, 0xF1	; 241
    19dc:	fc e0       	ldi	r31, 0x0C	; 12
    19de:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x18>
    19e2:	69 83       	std	Y+1, r22	; 0x01
    19e4:	7a 83       	std	Y+2, r23	; 0x02
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	2d 83       	std	Y+5, r18	; 0x05
    19ec:	3e 83       	std	Y+6, r19	; 0x06
    19ee:	4f 83       	std	Y+7, r20	; 0x07
    19f0:	58 87       	std	Y+8, r21	; 0x08
    19f2:	f9 e0       	ldi	r31, 0x09	; 9
    19f4:	ef 2e       	mov	r14, r31
    19f6:	f1 2c       	mov	r15, r1
    19f8:	ec 0e       	add	r14, r28
    19fa:	fd 1e       	adc	r15, r29
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	b7 01       	movw	r22, r14
    1a02:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1a06:	8e 01       	movw	r16, r28
    1a08:	0f 5e       	subi	r16, 0xEF	; 239
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	05 96       	adiw	r24, 0x05	; 5
    1a10:	b8 01       	movw	r22, r16
    1a12:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1a16:	c7 01       	movw	r24, r14
    1a18:	b8 01       	movw	r22, r16
    1a1a:	ae 01       	movw	r20, r28
    1a1c:	47 5e       	subi	r20, 0xE7	; 231
    1a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a20:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_fpadd_parts>
    1a24:	0e 94 c8 10 	call	0x2190	; 0x2190 <__pack_f>
    1a28:	a0 96       	adiw	r28, 0x20	; 32
    1a2a:	e6 e0       	ldi	r30, 0x06	; 6
    1a2c:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x18>

00001a30 <__mulsf3>:
    1a30:	a0 e2       	ldi	r26, 0x20	; 32
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ee e1       	ldi	r30, 0x1E	; 30
    1a36:	fd e0       	ldi	r31, 0x0D	; 13
    1a38:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__prologue_saves__>
    1a3c:	69 83       	std	Y+1, r22	; 0x01
    1a3e:	7a 83       	std	Y+2, r23	; 0x02
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	2d 83       	std	Y+5, r18	; 0x05
    1a46:	3e 83       	std	Y+6, r19	; 0x06
    1a48:	4f 83       	std	Y+7, r20	; 0x07
    1a4a:	58 87       	std	Y+8, r21	; 0x08
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	be 01       	movw	r22, r28
    1a52:	67 5f       	subi	r22, 0xF7	; 247
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	05 96       	adiw	r24, 0x05	; 5
    1a5e:	be 01       	movw	r22, r28
    1a60:	6f 5e       	subi	r22, 0xEF	; 239
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1a68:	99 85       	ldd	r25, Y+9	; 0x09
    1a6a:	92 30       	cpi	r25, 0x02	; 2
    1a6c:	88 f0       	brcs	.+34     	; 0x1a90 <__mulsf3+0x60>
    1a6e:	89 89       	ldd	r24, Y+17	; 0x11
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	c8 f0       	brcs	.+50     	; 0x1aa6 <__mulsf3+0x76>
    1a74:	94 30       	cpi	r25, 0x04	; 4
    1a76:	19 f4       	brne	.+6      	; 0x1a7e <__mulsf3+0x4e>
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	51 f4       	brne	.+20     	; 0x1a90 <__mulsf3+0x60>
    1a7c:	04 c0       	rjmp	.+8      	; 0x1a86 <__mulsf3+0x56>
    1a7e:	84 30       	cpi	r24, 0x04	; 4
    1a80:	29 f4       	brne	.+10     	; 0x1a8c <__mulsf3+0x5c>
    1a82:	92 30       	cpi	r25, 0x02	; 2
    1a84:	81 f4       	brne	.+32     	; 0x1aa6 <__mulsf3+0x76>
    1a86:	80 e3       	ldi	r24, 0x30	; 48
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	c6 c0       	rjmp	.+396    	; 0x1c18 <__mulsf3+0x1e8>
    1a8c:	92 30       	cpi	r25, 0x02	; 2
    1a8e:	49 f4       	brne	.+18     	; 0x1aa2 <__mulsf3+0x72>
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	8a 89       	ldd	r24, Y+18	; 0x12
    1a96:	98 13       	cpse	r25, r24
    1a98:	21 e0       	ldi	r18, 0x01	; 1
    1a9a:	2a 87       	std	Y+10, r18	; 0x0a
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	09 96       	adiw	r24, 0x09	; 9
    1aa0:	bb c0       	rjmp	.+374    	; 0x1c18 <__mulsf3+0x1e8>
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	49 f4       	brne	.+18     	; 0x1ab8 <__mulsf3+0x88>
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	8a 89       	ldd	r24, Y+18	; 0x12
    1aac:	98 13       	cpse	r25, r24
    1aae:	21 e0       	ldi	r18, 0x01	; 1
    1ab0:	2a 8b       	std	Y+18, r18	; 0x12
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	41 96       	adiw	r24, 0x11	; 17
    1ab6:	b0 c0       	rjmp	.+352    	; 0x1c18 <__mulsf3+0x1e8>
    1ab8:	2d 84       	ldd	r2, Y+13	; 0x0d
    1aba:	3e 84       	ldd	r3, Y+14	; 0x0e
    1abc:	4f 84       	ldd	r4, Y+15	; 0x0f
    1abe:	58 88       	ldd	r5, Y+16	; 0x10
    1ac0:	6d 88       	ldd	r6, Y+21	; 0x15
    1ac2:	7e 88       	ldd	r7, Y+22	; 0x16
    1ac4:	8f 88       	ldd	r8, Y+23	; 0x17
    1ac6:	98 8c       	ldd	r9, Y+24	; 0x18
    1ac8:	ee 24       	eor	r14, r14
    1aca:	ff 24       	eor	r15, r15
    1acc:	87 01       	movw	r16, r14
    1ace:	aa 24       	eor	r10, r10
    1ad0:	bb 24       	eor	r11, r11
    1ad2:	65 01       	movw	r12, r10
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	e0 e0       	ldi	r30, 0x00	; 0
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	c1 01       	movw	r24, r2
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	90 70       	andi	r25, 0x00	; 0
    1ae6:	89 2b       	or	r24, r25
    1ae8:	e9 f0       	breq	.+58     	; 0x1b24 <__mulsf3+0xf4>
    1aea:	e6 0c       	add	r14, r6
    1aec:	f7 1c       	adc	r15, r7
    1aee:	08 1d       	adc	r16, r8
    1af0:	19 1d       	adc	r17, r9
    1af2:	9a 01       	movw	r18, r20
    1af4:	ab 01       	movw	r20, r22
    1af6:	2a 0d       	add	r18, r10
    1af8:	3b 1d       	adc	r19, r11
    1afa:	4c 1d       	adc	r20, r12
    1afc:	5d 1d       	adc	r21, r13
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e0       	ldi	r26, 0x00	; 0
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e6 14       	cp	r14, r6
    1b08:	f7 04       	cpc	r15, r7
    1b0a:	08 05       	cpc	r16, r8
    1b0c:	19 05       	cpc	r17, r9
    1b0e:	20 f4       	brcc	.+8      	; 0x1b18 <__mulsf3+0xe8>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	ba 01       	movw	r22, r20
    1b1a:	a9 01       	movw	r20, r18
    1b1c:	48 0f       	add	r20, r24
    1b1e:	59 1f       	adc	r21, r25
    1b20:	6a 1f       	adc	r22, r26
    1b22:	7b 1f       	adc	r23, r27
    1b24:	aa 0c       	add	r10, r10
    1b26:	bb 1c       	adc	r11, r11
    1b28:	cc 1c       	adc	r12, r12
    1b2a:	dd 1c       	adc	r13, r13
    1b2c:	97 fe       	sbrs	r9, 7
    1b2e:	08 c0       	rjmp	.+16     	; 0x1b40 <__mulsf3+0x110>
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 e0       	ldi	r26, 0x00	; 0
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	a8 2a       	or	r10, r24
    1b3a:	b9 2a       	or	r11, r25
    1b3c:	ca 2a       	or	r12, r26
    1b3e:	db 2a       	or	r13, r27
    1b40:	31 96       	adiw	r30, 0x01	; 1
    1b42:	e0 32       	cpi	r30, 0x20	; 32
    1b44:	f1 05       	cpc	r31, r1
    1b46:	49 f0       	breq	.+18     	; 0x1b5a <__mulsf3+0x12a>
    1b48:	66 0c       	add	r6, r6
    1b4a:	77 1c       	adc	r7, r7
    1b4c:	88 1c       	adc	r8, r8
    1b4e:	99 1c       	adc	r9, r9
    1b50:	56 94       	lsr	r5
    1b52:	47 94       	ror	r4
    1b54:	37 94       	ror	r3
    1b56:	27 94       	ror	r2
    1b58:	c3 cf       	rjmp	.-122    	; 0x1ae0 <__mulsf3+0xb0>
    1b5a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b5c:	ea 89       	ldd	r30, Y+18	; 0x12
    1b5e:	2b 89       	ldd	r18, Y+19	; 0x13
    1b60:	3c 89       	ldd	r19, Y+20	; 0x14
    1b62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b66:	28 0f       	add	r18, r24
    1b68:	39 1f       	adc	r19, r25
    1b6a:	2e 5f       	subi	r18, 0xFE	; 254
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	17 c0       	rjmp	.+46     	; 0x1b9e <__mulsf3+0x16e>
    1b70:	ca 01       	movw	r24, r20
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	90 70       	andi	r25, 0x00	; 0
    1b76:	89 2b       	or	r24, r25
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <__mulsf3+0x162>
    1b7a:	16 95       	lsr	r17
    1b7c:	07 95       	ror	r16
    1b7e:	f7 94       	ror	r15
    1b80:	e7 94       	ror	r14
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e8       	ldi	r27, 0x80	; 128
    1b8a:	e8 2a       	or	r14, r24
    1b8c:	f9 2a       	or	r15, r25
    1b8e:	0a 2b       	or	r16, r26
    1b90:	1b 2b       	or	r17, r27
    1b92:	76 95       	lsr	r23
    1b94:	67 95       	ror	r22
    1b96:	57 95       	ror	r21
    1b98:	47 95       	ror	r20
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	77 fd       	sbrc	r23, 7
    1ba0:	e7 cf       	rjmp	.-50     	; 0x1b70 <__mulsf3+0x140>
    1ba2:	0c c0       	rjmp	.+24     	; 0x1bbc <__mulsf3+0x18c>
    1ba4:	44 0f       	add	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	66 1f       	adc	r22, r22
    1baa:	77 1f       	adc	r23, r23
    1bac:	17 fd       	sbrc	r17, 7
    1bae:	41 60       	ori	r20, 0x01	; 1
    1bb0:	ee 0c       	add	r14, r14
    1bb2:	ff 1c       	adc	r15, r15
    1bb4:	00 1f       	adc	r16, r16
    1bb6:	11 1f       	adc	r17, r17
    1bb8:	21 50       	subi	r18, 0x01	; 1
    1bba:	30 40       	sbci	r19, 0x00	; 0
    1bbc:	40 30       	cpi	r20, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	59 07       	cpc	r21, r25
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	69 07       	cpc	r22, r25
    1bc6:	90 e4       	ldi	r25, 0x40	; 64
    1bc8:	79 07       	cpc	r23, r25
    1bca:	60 f3       	brcs	.-40     	; 0x1ba4 <__mulsf3+0x174>
    1bcc:	2b 8f       	std	Y+27, r18	; 0x1b
    1bce:	3c 8f       	std	Y+28, r19	; 0x1c
    1bd0:	db 01       	movw	r26, r22
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	8f 77       	andi	r24, 0x7F	; 127
    1bd6:	90 70       	andi	r25, 0x00	; 0
    1bd8:	a0 70       	andi	r26, 0x00	; 0
    1bda:	b0 70       	andi	r27, 0x00	; 0
    1bdc:	80 34       	cpi	r24, 0x40	; 64
    1bde:	91 05       	cpc	r25, r1
    1be0:	a1 05       	cpc	r26, r1
    1be2:	b1 05       	cpc	r27, r1
    1be4:	61 f4       	brne	.+24     	; 0x1bfe <__mulsf3+0x1ce>
    1be6:	47 fd       	sbrc	r20, 7
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <__mulsf3+0x1ce>
    1bea:	e1 14       	cp	r14, r1
    1bec:	f1 04       	cpc	r15, r1
    1bee:	01 05       	cpc	r16, r1
    1bf0:	11 05       	cpc	r17, r1
    1bf2:	29 f0       	breq	.+10     	; 0x1bfe <__mulsf3+0x1ce>
    1bf4:	40 5c       	subi	r20, 0xC0	; 192
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	6f 4f       	sbci	r22, 0xFF	; 255
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	40 78       	andi	r20, 0x80	; 128
    1bfe:	1a 8e       	std	Y+26, r1	; 0x1a
    1c00:	fe 17       	cp	r31, r30
    1c02:	11 f0       	breq	.+4      	; 0x1c08 <__mulsf3+0x1d8>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	8a 8f       	std	Y+26, r24	; 0x1a
    1c08:	4d 8f       	std	Y+29, r20	; 0x1d
    1c0a:	5e 8f       	std	Y+30, r21	; 0x1e
    1c0c:	6f 8f       	std	Y+31, r22	; 0x1f
    1c0e:	78 a3       	std	Y+32, r23	; 0x20
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	89 8f       	std	Y+25, r24	; 0x19
    1c14:	ce 01       	movw	r24, r28
    1c16:	49 96       	adiw	r24, 0x19	; 25
    1c18:	0e 94 c8 10 	call	0x2190	; 0x2190 <__pack_f>
    1c1c:	a0 96       	adiw	r28, 0x20	; 32
    1c1e:	e2 e1       	ldi	r30, 0x12	; 18
    1c20:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__epilogue_restores__>

00001c24 <__divsf3>:
    1c24:	a8 e1       	ldi	r26, 0x18	; 24
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e1       	ldi	r30, 0x18	; 24
    1c2a:	fe e0       	ldi	r31, 0x0E	; 14
    1c2c:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__+0x10>
    1c30:	69 83       	std	Y+1, r22	; 0x01
    1c32:	7a 83       	std	Y+2, r23	; 0x02
    1c34:	8b 83       	std	Y+3, r24	; 0x03
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	2d 83       	std	Y+5, r18	; 0x05
    1c3a:	3e 83       	std	Y+6, r19	; 0x06
    1c3c:	4f 83       	std	Y+7, r20	; 0x07
    1c3e:	58 87       	std	Y+8, r21	; 0x08
    1c40:	b9 e0       	ldi	r27, 0x09	; 9
    1c42:	eb 2e       	mov	r14, r27
    1c44:	f1 2c       	mov	r15, r1
    1c46:	ec 0e       	add	r14, r28
    1c48:	fd 1e       	adc	r15, r29
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	b7 01       	movw	r22, r14
    1c50:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1c54:	8e 01       	movw	r16, r28
    1c56:	0f 5e       	subi	r16, 0xEF	; 239
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	05 96       	adiw	r24, 0x05	; 5
    1c5e:	b8 01       	movw	r22, r16
    1c60:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1c64:	29 85       	ldd	r18, Y+9	; 0x09
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <__divsf3+0x48>
    1c6a:	7e c0       	rjmp	.+252    	; 0x1d68 <__divsf3+0x144>
    1c6c:	39 89       	ldd	r19, Y+17	; 0x11
    1c6e:	32 30       	cpi	r19, 0x02	; 2
    1c70:	10 f4       	brcc	.+4      	; 0x1c76 <__divsf3+0x52>
    1c72:	b8 01       	movw	r22, r16
    1c74:	7c c0       	rjmp	.+248    	; 0x1d6e <__divsf3+0x14a>
    1c76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c78:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7a:	89 27       	eor	r24, r25
    1c7c:	8a 87       	std	Y+10, r24	; 0x0a
    1c7e:	24 30       	cpi	r18, 0x04	; 4
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <__divsf3+0x62>
    1c82:	22 30       	cpi	r18, 0x02	; 2
    1c84:	31 f4       	brne	.+12     	; 0x1c92 <__divsf3+0x6e>
    1c86:	23 17       	cp	r18, r19
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <__divsf3+0x68>
    1c8a:	6e c0       	rjmp	.+220    	; 0x1d68 <__divsf3+0x144>
    1c8c:	60 e3       	ldi	r22, 0x30	; 48
    1c8e:	71 e0       	ldi	r23, 0x01	; 1
    1c90:	6e c0       	rjmp	.+220    	; 0x1d6e <__divsf3+0x14a>
    1c92:	34 30       	cpi	r19, 0x04	; 4
    1c94:	39 f4       	brne	.+14     	; 0x1ca4 <__divsf3+0x80>
    1c96:	1d 86       	std	Y+13, r1	; 0x0d
    1c98:	1e 86       	std	Y+14, r1	; 0x0e
    1c9a:	1f 86       	std	Y+15, r1	; 0x0f
    1c9c:	18 8a       	std	Y+16, r1	; 0x10
    1c9e:	1c 86       	std	Y+12, r1	; 0x0c
    1ca0:	1b 86       	std	Y+11, r1	; 0x0b
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <__divsf3+0x88>
    1ca4:	32 30       	cpi	r19, 0x02	; 2
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <__divsf3+0x8c>
    1ca8:	84 e0       	ldi	r24, 0x04	; 4
    1caa:	89 87       	std	Y+9, r24	; 0x09
    1cac:	b7 01       	movw	r22, r14
    1cae:	5f c0       	rjmp	.+190    	; 0x1d6e <__divsf3+0x14a>
    1cb0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cb2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	28 1b       	sub	r18, r24
    1cba:	39 0b       	sbc	r19, r25
    1cbc:	3c 87       	std	Y+12, r19	; 0x0c
    1cbe:	2b 87       	std	Y+11, r18	; 0x0b
    1cc0:	ed 84       	ldd	r14, Y+13	; 0x0d
    1cc2:	fe 84       	ldd	r15, Y+14	; 0x0e
    1cc4:	0f 85       	ldd	r16, Y+15	; 0x0f
    1cc6:	18 89       	ldd	r17, Y+16	; 0x10
    1cc8:	ad 88       	ldd	r10, Y+21	; 0x15
    1cca:	be 88       	ldd	r11, Y+22	; 0x16
    1ccc:	cf 88       	ldd	r12, Y+23	; 0x17
    1cce:	d8 8c       	ldd	r13, Y+24	; 0x18
    1cd0:	ea 14       	cp	r14, r10
    1cd2:	fb 04       	cpc	r15, r11
    1cd4:	0c 05       	cpc	r16, r12
    1cd6:	1d 05       	cpc	r17, r13
    1cd8:	40 f4       	brcc	.+16     	; 0x1cea <__divsf3+0xc6>
    1cda:	ee 0c       	add	r14, r14
    1cdc:	ff 1c       	adc	r15, r15
    1cde:	00 1f       	adc	r16, r16
    1ce0:	11 1f       	adc	r17, r17
    1ce2:	21 50       	subi	r18, 0x01	; 1
    1ce4:	30 40       	sbci	r19, 0x00	; 0
    1ce6:	3c 87       	std	Y+12, r19	; 0x0c
    1ce8:	2b 87       	std	Y+11, r18	; 0x0b
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e0       	ldi	r26, 0x00	; 0
    1cf8:	b0 e4       	ldi	r27, 0x40	; 64
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	ea 14       	cp	r14, r10
    1d00:	fb 04       	cpc	r15, r11
    1d02:	0c 05       	cpc	r16, r12
    1d04:	1d 05       	cpc	r17, r13
    1d06:	40 f0       	brcs	.+16     	; 0x1d18 <__divsf3+0xf4>
    1d08:	28 2b       	or	r18, r24
    1d0a:	39 2b       	or	r19, r25
    1d0c:	4a 2b       	or	r20, r26
    1d0e:	5b 2b       	or	r21, r27
    1d10:	ea 18       	sub	r14, r10
    1d12:	fb 08       	sbc	r15, r11
    1d14:	0c 09       	sbc	r16, r12
    1d16:	1d 09       	sbc	r17, r13
    1d18:	b6 95       	lsr	r27
    1d1a:	a7 95       	ror	r26
    1d1c:	97 95       	ror	r25
    1d1e:	87 95       	ror	r24
    1d20:	ee 0c       	add	r14, r14
    1d22:	ff 1c       	adc	r15, r15
    1d24:	00 1f       	adc	r16, r16
    1d26:	11 1f       	adc	r17, r17
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	6f 31       	cpi	r22, 0x1F	; 31
    1d2e:	71 05       	cpc	r23, r1
    1d30:	31 f7       	brne	.-52     	; 0x1cfe <__divsf3+0xda>
    1d32:	da 01       	movw	r26, r20
    1d34:	c9 01       	movw	r24, r18
    1d36:	8f 77       	andi	r24, 0x7F	; 127
    1d38:	90 70       	andi	r25, 0x00	; 0
    1d3a:	a0 70       	andi	r26, 0x00	; 0
    1d3c:	b0 70       	andi	r27, 0x00	; 0
    1d3e:	80 34       	cpi	r24, 0x40	; 64
    1d40:	91 05       	cpc	r25, r1
    1d42:	a1 05       	cpc	r26, r1
    1d44:	b1 05       	cpc	r27, r1
    1d46:	61 f4       	brne	.+24     	; 0x1d60 <__divsf3+0x13c>
    1d48:	27 fd       	sbrc	r18, 7
    1d4a:	0a c0       	rjmp	.+20     	; 0x1d60 <__divsf3+0x13c>
    1d4c:	e1 14       	cp	r14, r1
    1d4e:	f1 04       	cpc	r15, r1
    1d50:	01 05       	cpc	r16, r1
    1d52:	11 05       	cpc	r17, r1
    1d54:	29 f0       	breq	.+10     	; 0x1d60 <__divsf3+0x13c>
    1d56:	20 5c       	subi	r18, 0xC0	; 192
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5e:	20 78       	andi	r18, 0x80	; 128
    1d60:	2d 87       	std	Y+13, r18	; 0x0d
    1d62:	3e 87       	std	Y+14, r19	; 0x0e
    1d64:	4f 87       	std	Y+15, r20	; 0x0f
    1d66:	58 8b       	std	Y+16, r21	; 0x10
    1d68:	be 01       	movw	r22, r28
    1d6a:	67 5f       	subi	r22, 0xF7	; 247
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	cb 01       	movw	r24, r22
    1d70:	0e 94 c8 10 	call	0x2190	; 0x2190 <__pack_f>
    1d74:	68 96       	adiw	r28, 0x18	; 24
    1d76:	ea e0       	ldi	r30, 0x0A	; 10
    1d78:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__+0x10>

00001d7c <__gtsf2>:
    1d7c:	a8 e1       	ldi	r26, 0x18	; 24
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e4 ec       	ldi	r30, 0xC4	; 196
    1d82:	fe e0       	ldi	r31, 0x0E	; 14
    1d84:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x18>
    1d88:	69 83       	std	Y+1, r22	; 0x01
    1d8a:	7a 83       	std	Y+2, r23	; 0x02
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	2d 83       	std	Y+5, r18	; 0x05
    1d92:	3e 83       	std	Y+6, r19	; 0x06
    1d94:	4f 83       	std	Y+7, r20	; 0x07
    1d96:	58 87       	std	Y+8, r21	; 0x08
    1d98:	89 e0       	ldi	r24, 0x09	; 9
    1d9a:	e8 2e       	mov	r14, r24
    1d9c:	f1 2c       	mov	r15, r1
    1d9e:	ec 0e       	add	r14, r28
    1da0:	fd 1e       	adc	r15, r29
    1da2:	ce 01       	movw	r24, r28
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	b7 01       	movw	r22, r14
    1da8:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 5e       	subi	r16, 0xEF	; 239
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	ce 01       	movw	r24, r28
    1db4:	05 96       	adiw	r24, 0x05	; 5
    1db6:	b8 01       	movw	r22, r16
    1db8:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	40 f0       	brcs	.+16     	; 0x1dd2 <__gtsf2+0x56>
    1dc2:	89 89       	ldd	r24, Y+17	; 0x11
    1dc4:	82 30       	cpi	r24, 0x02	; 2
    1dc6:	28 f0       	brcs	.+10     	; 0x1dd2 <__gtsf2+0x56>
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b8 01       	movw	r22, r16
    1dcc:	0e 94 15 12 	call	0x242a	; 0x242a <__fpcmp_parts_f>
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <__gtsf2+0x58>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	68 96       	adiw	r28, 0x18	; 24
    1dd6:	e6 e0       	ldi	r30, 0x06	; 6
    1dd8:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x18>

00001ddc <__gesf2>:
    1ddc:	a8 e1       	ldi	r26, 0x18	; 24
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e4 ef       	ldi	r30, 0xF4	; 244
    1de2:	fe e0       	ldi	r31, 0x0E	; 14
    1de4:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x18>
    1de8:	69 83       	std	Y+1, r22	; 0x01
    1dea:	7a 83       	std	Y+2, r23	; 0x02
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	2d 83       	std	Y+5, r18	; 0x05
    1df2:	3e 83       	std	Y+6, r19	; 0x06
    1df4:	4f 83       	std	Y+7, r20	; 0x07
    1df6:	58 87       	std	Y+8, r21	; 0x08
    1df8:	89 e0       	ldi	r24, 0x09	; 9
    1dfa:	e8 2e       	mov	r14, r24
    1dfc:	f1 2c       	mov	r15, r1
    1dfe:	ec 0e       	add	r14, r28
    1e00:	fd 1e       	adc	r15, r29
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	b7 01       	movw	r22, r14
    1e08:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	0f 5e       	subi	r16, 0xEF	; 239
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	ce 01       	movw	r24, r28
    1e14:	05 96       	adiw	r24, 0x05	; 5
    1e16:	b8 01       	movw	r22, r16
    1e18:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	40 f0       	brcs	.+16     	; 0x1e32 <__gesf2+0x56>
    1e22:	89 89       	ldd	r24, Y+17	; 0x11
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	28 f0       	brcs	.+10     	; 0x1e32 <__gesf2+0x56>
    1e28:	c7 01       	movw	r24, r14
    1e2a:	b8 01       	movw	r22, r16
    1e2c:	0e 94 15 12 	call	0x242a	; 0x242a <__fpcmp_parts_f>
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <__gesf2+0x58>
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	68 96       	adiw	r28, 0x18	; 24
    1e36:	e6 e0       	ldi	r30, 0x06	; 6
    1e38:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x18>

00001e3c <__ltsf2>:
    1e3c:	a8 e1       	ldi	r26, 0x18	; 24
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e4 e2       	ldi	r30, 0x24	; 36
    1e42:	ff e0       	ldi	r31, 0x0F	; 15
    1e44:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x18>
    1e48:	69 83       	std	Y+1, r22	; 0x01
    1e4a:	7a 83       	std	Y+2, r23	; 0x02
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	2d 83       	std	Y+5, r18	; 0x05
    1e52:	3e 83       	std	Y+6, r19	; 0x06
    1e54:	4f 83       	std	Y+7, r20	; 0x07
    1e56:	58 87       	std	Y+8, r21	; 0x08
    1e58:	89 e0       	ldi	r24, 0x09	; 9
    1e5a:	e8 2e       	mov	r14, r24
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	ec 0e       	add	r14, r28
    1e60:	fd 1e       	adc	r15, r29
    1e62:	ce 01       	movw	r24, r28
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	b7 01       	movw	r22, r14
    1e68:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1e6c:	8e 01       	movw	r16, r28
    1e6e:	0f 5e       	subi	r16, 0xEF	; 239
    1e70:	1f 4f       	sbci	r17, 0xFF	; 255
    1e72:	ce 01       	movw	r24, r28
    1e74:	05 96       	adiw	r24, 0x05	; 5
    1e76:	b8 01       	movw	r22, r16
    1e78:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	40 f0       	brcs	.+16     	; 0x1e92 <__ltsf2+0x56>
    1e82:	89 89       	ldd	r24, Y+17	; 0x11
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	28 f0       	brcs	.+10     	; 0x1e92 <__ltsf2+0x56>
    1e88:	c7 01       	movw	r24, r14
    1e8a:	b8 01       	movw	r22, r16
    1e8c:	0e 94 15 12 	call	0x242a	; 0x242a <__fpcmp_parts_f>
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <__ltsf2+0x58>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	68 96       	adiw	r28, 0x18	; 24
    1e96:	e6 e0       	ldi	r30, 0x06	; 6
    1e98:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x18>

00001e9c <__floatsisf>:
    1e9c:	a8 e0       	ldi	r26, 0x08	; 8
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e4 e5       	ldi	r30, 0x54	; 84
    1ea2:	ff e0       	ldi	r31, 0x0F	; 15
    1ea4:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__prologue_saves__+0x12>
    1ea8:	9b 01       	movw	r18, r22
    1eaa:	ac 01       	movw	r20, r24
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	da 01       	movw	r26, r20
    1eb2:	c9 01       	movw	r24, r18
    1eb4:	88 27       	eor	r24, r24
    1eb6:	b7 fd       	sbrc	r27, 7
    1eb8:	83 95       	inc	r24
    1eba:	99 27       	eor	r25, r25
    1ebc:	aa 27       	eor	r26, r26
    1ebe:	bb 27       	eor	r27, r27
    1ec0:	b8 2e       	mov	r11, r24
    1ec2:	21 15       	cp	r18, r1
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	41 05       	cpc	r20, r1
    1ec8:	51 05       	cpc	r21, r1
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <__floatsisf+0x36>
    1ecc:	82 e0       	ldi	r24, 0x02	; 2
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	3a c0       	rjmp	.+116    	; 0x1f46 <__floatsisf+0xaa>
    1ed2:	88 23       	and	r24, r24
    1ed4:	a9 f0       	breq	.+42     	; 0x1f00 <__floatsisf+0x64>
    1ed6:	20 30       	cpi	r18, 0x00	; 0
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	38 07       	cpc	r19, r24
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	48 07       	cpc	r20, r24
    1ee0:	80 e8       	ldi	r24, 0x80	; 128
    1ee2:	58 07       	cpc	r21, r24
    1ee4:	29 f4       	brne	.+10     	; 0x1ef0 <__floatsisf+0x54>
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	9f ec       	ldi	r25, 0xCF	; 207
    1eee:	30 c0       	rjmp	.+96     	; 0x1f50 <__floatsisf+0xb4>
    1ef0:	ee 24       	eor	r14, r14
    1ef2:	ff 24       	eor	r15, r15
    1ef4:	87 01       	movw	r16, r14
    1ef6:	e2 1a       	sub	r14, r18
    1ef8:	f3 0a       	sbc	r15, r19
    1efa:	04 0b       	sbc	r16, r20
    1efc:	15 0b       	sbc	r17, r21
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <__floatsisf+0x68>
    1f00:	79 01       	movw	r14, r18
    1f02:	8a 01       	movw	r16, r20
    1f04:	8e e1       	ldi	r24, 0x1E	; 30
    1f06:	c8 2e       	mov	r12, r24
    1f08:	d1 2c       	mov	r13, r1
    1f0a:	dc 82       	std	Y+4, r13	; 0x04
    1f0c:	cb 82       	std	Y+3, r12	; 0x03
    1f0e:	ed 82       	std	Y+5, r14	; 0x05
    1f10:	fe 82       	std	Y+6, r15	; 0x06
    1f12:	0f 83       	std	Y+7, r16	; 0x07
    1f14:	18 87       	std	Y+8, r17	; 0x08
    1f16:	c8 01       	movw	r24, r16
    1f18:	b7 01       	movw	r22, r14
    1f1a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__clzsi2>
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	18 16       	cp	r1, r24
    1f22:	19 06       	cpc	r1, r25
    1f24:	84 f4       	brge	.+32     	; 0x1f46 <__floatsisf+0xaa>
    1f26:	08 2e       	mov	r0, r24
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <__floatsisf+0x96>
    1f2a:	ee 0c       	add	r14, r14
    1f2c:	ff 1c       	adc	r15, r15
    1f2e:	00 1f       	adc	r16, r16
    1f30:	11 1f       	adc	r17, r17
    1f32:	0a 94       	dec	r0
    1f34:	d2 f7       	brpl	.-12     	; 0x1f2a <__floatsisf+0x8e>
    1f36:	ed 82       	std	Y+5, r14	; 0x05
    1f38:	fe 82       	std	Y+6, r15	; 0x06
    1f3a:	0f 83       	std	Y+7, r16	; 0x07
    1f3c:	18 87       	std	Y+8, r17	; 0x08
    1f3e:	c8 1a       	sub	r12, r24
    1f40:	d9 0a       	sbc	r13, r25
    1f42:	dc 82       	std	Y+4, r13	; 0x04
    1f44:	cb 82       	std	Y+3, r12	; 0x03
    1f46:	ba 82       	std	Y+2, r11	; 0x02
    1f48:	ce 01       	movw	r24, r28
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__pack_f>
    1f50:	28 96       	adiw	r28, 0x08	; 8
    1f52:	e9 e0       	ldi	r30, 0x09	; 9
    1f54:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__epilogue_restores__+0x12>

00001f58 <__fixsfsi>:
    1f58:	ac e0       	ldi	r26, 0x0C	; 12
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1f5e:	ff e0       	ldi	r31, 0x0F	; 15
    1f60:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__prologue_saves__+0x20>
    1f64:	69 83       	std	Y+1, r22	; 0x01
    1f66:	7a 83       	std	Y+2, r23	; 0x02
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	be 01       	movw	r22, r28
    1f72:	6b 5f       	subi	r22, 0xFB	; 251
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	0e 94 9d 11 	call	0x233a	; 0x233a <__unpack_f>
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	61 f1       	breq	.+88     	; 0x1fd8 <__fixsfsi+0x80>
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	50 f1       	brcs	.+84     	; 0x1fd8 <__fixsfsi+0x80>
    1f84:	84 30       	cpi	r24, 0x04	; 4
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <__fixsfsi+0x38>
    1f88:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8a:	88 23       	and	r24, r24
    1f8c:	51 f1       	breq	.+84     	; 0x1fe2 <__fixsfsi+0x8a>
    1f8e:	2e c0       	rjmp	.+92     	; 0x1fec <__fixsfsi+0x94>
    1f90:	2f 81       	ldd	r18, Y+7	; 0x07
    1f92:	38 85       	ldd	r19, Y+8	; 0x08
    1f94:	37 fd       	sbrc	r19, 7
    1f96:	20 c0       	rjmp	.+64     	; 0x1fd8 <__fixsfsi+0x80>
    1f98:	6e 81       	ldd	r22, Y+6	; 0x06
    1f9a:	2f 31       	cpi	r18, 0x1F	; 31
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	1c f0       	brlt	.+6      	; 0x1fa6 <__fixsfsi+0x4e>
    1fa0:	66 23       	and	r22, r22
    1fa2:	f9 f0       	breq	.+62     	; 0x1fe2 <__fixsfsi+0x8a>
    1fa4:	23 c0       	rjmp	.+70     	; 0x1fec <__fixsfsi+0x94>
    1fa6:	8e e1       	ldi	r24, 0x1E	; 30
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	82 1b       	sub	r24, r18
    1fac:	93 0b       	sbc	r25, r19
    1fae:	29 85       	ldd	r18, Y+9	; 0x09
    1fb0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fb2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fb4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <__fixsfsi+0x68>
    1fb8:	56 95       	lsr	r21
    1fba:	47 95       	ror	r20
    1fbc:	37 95       	ror	r19
    1fbe:	27 95       	ror	r18
    1fc0:	8a 95       	dec	r24
    1fc2:	d2 f7       	brpl	.-12     	; 0x1fb8 <__fixsfsi+0x60>
    1fc4:	66 23       	and	r22, r22
    1fc6:	b1 f0       	breq	.+44     	; 0x1ff4 <__fixsfsi+0x9c>
    1fc8:	50 95       	com	r21
    1fca:	40 95       	com	r20
    1fcc:	30 95       	com	r19
    1fce:	21 95       	neg	r18
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd6:	0e c0       	rjmp	.+28     	; 0x1ff4 <__fixsfsi+0x9c>
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	09 c0       	rjmp	.+18     	; 0x1ff4 <__fixsfsi+0x9c>
    1fe2:	2f ef       	ldi	r18, 0xFF	; 255
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f ef       	ldi	r20, 0xFF	; 255
    1fe8:	5f e7       	ldi	r21, 0x7F	; 127
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <__fixsfsi+0x9c>
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	50 e8       	ldi	r21, 0x80	; 128
    1ff4:	b9 01       	movw	r22, r18
    1ff6:	ca 01       	movw	r24, r20
    1ff8:	2c 96       	adiw	r28, 0x0c	; 12
    1ffa:	e2 e0       	ldi	r30, 0x02	; 2
    1ffc:	0c 94 df 12 	jmp	0x25be	; 0x25be <__epilogue_restores__+0x20>

00002000 <__floatunsisf>:
    2000:	a8 e0       	ldi	r26, 0x08	; 8
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e6 e0       	ldi	r30, 0x06	; 6
    2006:	f0 e1       	ldi	r31, 0x10	; 16
    2008:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__+0x10>
    200c:	7b 01       	movw	r14, r22
    200e:	8c 01       	movw	r16, r24
    2010:	61 15       	cp	r22, r1
    2012:	71 05       	cpc	r23, r1
    2014:	81 05       	cpc	r24, r1
    2016:	91 05       	cpc	r25, r1
    2018:	19 f4       	brne	.+6      	; 0x2020 <__floatunsisf+0x20>
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	60 c0       	rjmp	.+192    	; 0x20e0 <__floatunsisf+0xe0>
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	8e e1       	ldi	r24, 0x1E	; 30
    2026:	c8 2e       	mov	r12, r24
    2028:	d1 2c       	mov	r13, r1
    202a:	dc 82       	std	Y+4, r13	; 0x04
    202c:	cb 82       	std	Y+3, r12	; 0x03
    202e:	ed 82       	std	Y+5, r14	; 0x05
    2030:	fe 82       	std	Y+6, r15	; 0x06
    2032:	0f 83       	std	Y+7, r16	; 0x07
    2034:	18 87       	std	Y+8, r17	; 0x08
    2036:	c8 01       	movw	r24, r16
    2038:	b7 01       	movw	r22, r14
    203a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__clzsi2>
    203e:	fc 01       	movw	r30, r24
    2040:	31 97       	sbiw	r30, 0x01	; 1
    2042:	f7 ff       	sbrs	r31, 7
    2044:	3b c0       	rjmp	.+118    	; 0x20bc <__floatunsisf+0xbc>
    2046:	22 27       	eor	r18, r18
    2048:	33 27       	eor	r19, r19
    204a:	2e 1b       	sub	r18, r30
    204c:	3f 0b       	sbc	r19, r31
    204e:	57 01       	movw	r10, r14
    2050:	68 01       	movw	r12, r16
    2052:	02 2e       	mov	r0, r18
    2054:	04 c0       	rjmp	.+8      	; 0x205e <__floatunsisf+0x5e>
    2056:	d6 94       	lsr	r13
    2058:	c7 94       	ror	r12
    205a:	b7 94       	ror	r11
    205c:	a7 94       	ror	r10
    205e:	0a 94       	dec	r0
    2060:	d2 f7       	brpl	.-12     	; 0x2056 <__floatunsisf+0x56>
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e0       	ldi	r26, 0x00	; 0
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	04 c0       	rjmp	.+8      	; 0x207c <__floatunsisf+0x7c>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	aa 1f       	adc	r26, r26
    207a:	bb 1f       	adc	r27, r27
    207c:	2a 95       	dec	r18
    207e:	d2 f7       	brpl	.-12     	; 0x2074 <__floatunsisf+0x74>
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	a1 09       	sbc	r26, r1
    2084:	b1 09       	sbc	r27, r1
    2086:	8e 21       	and	r24, r14
    2088:	9f 21       	and	r25, r15
    208a:	a0 23       	and	r26, r16
    208c:	b1 23       	and	r27, r17
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	a1 05       	cpc	r26, r1
    2092:	b1 05       	cpc	r27, r1
    2094:	21 f0       	breq	.+8      	; 0x209e <__floatunsisf+0x9e>
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	4a 29       	or	r20, r10
    20a0:	5b 29       	or	r21, r11
    20a2:	6c 29       	or	r22, r12
    20a4:	7d 29       	or	r23, r13
    20a6:	4d 83       	std	Y+5, r20	; 0x05
    20a8:	5e 83       	std	Y+6, r21	; 0x06
    20aa:	6f 83       	std	Y+7, r22	; 0x07
    20ac:	78 87       	std	Y+8, r23	; 0x08
    20ae:	8e e1       	ldi	r24, 0x1E	; 30
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	8e 1b       	sub	r24, r30
    20b4:	9f 0b       	sbc	r25, r31
    20b6:	9c 83       	std	Y+4, r25	; 0x04
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    20ba:	12 c0       	rjmp	.+36     	; 0x20e0 <__floatunsisf+0xe0>
    20bc:	30 97       	sbiw	r30, 0x00	; 0
    20be:	81 f0       	breq	.+32     	; 0x20e0 <__floatunsisf+0xe0>
    20c0:	0e 2e       	mov	r0, r30
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <__floatunsisf+0xcc>
    20c4:	ee 0c       	add	r14, r14
    20c6:	ff 1c       	adc	r15, r15
    20c8:	00 1f       	adc	r16, r16
    20ca:	11 1f       	adc	r17, r17
    20cc:	0a 94       	dec	r0
    20ce:	d2 f7       	brpl	.-12     	; 0x20c4 <__floatunsisf+0xc4>
    20d0:	ed 82       	std	Y+5, r14	; 0x05
    20d2:	fe 82       	std	Y+6, r15	; 0x06
    20d4:	0f 83       	std	Y+7, r16	; 0x07
    20d6:	18 87       	std	Y+8, r17	; 0x08
    20d8:	ce 1a       	sub	r12, r30
    20da:	df 0a       	sbc	r13, r31
    20dc:	dc 82       	std	Y+4, r13	; 0x04
    20de:	cb 82       	std	Y+3, r12	; 0x03
    20e0:	1a 82       	std	Y+2, r1	; 0x02
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__pack_f>
    20ea:	28 96       	adiw	r28, 0x08	; 8
    20ec:	ea e0       	ldi	r30, 0x0A	; 10
    20ee:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__+0x10>

000020f2 <__clzsi2>:
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	7b 01       	movw	r14, r22
    20fc:	8c 01       	movw	r16, r24
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	e8 16       	cp	r14, r24
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	f8 06       	cpc	r15, r24
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	08 07       	cpc	r16, r24
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	18 07       	cpc	r17, r24
    210e:	88 f4       	brcc	.+34     	; 0x2132 <__clzsi2+0x40>
    2110:	8f ef       	ldi	r24, 0xFF	; 255
    2112:	e8 16       	cp	r14, r24
    2114:	f1 04       	cpc	r15, r1
    2116:	01 05       	cpc	r16, r1
    2118:	11 05       	cpc	r17, r1
    211a:	31 f0       	breq	.+12     	; 0x2128 <__clzsi2+0x36>
    211c:	28 f0       	brcs	.+10     	; 0x2128 <__clzsi2+0x36>
    211e:	88 e0       	ldi	r24, 0x08	; 8
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	17 c0       	rjmp	.+46     	; 0x2156 <__clzsi2+0x64>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a0 e0       	ldi	r26, 0x00	; 0
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	12 c0       	rjmp	.+36     	; 0x2156 <__clzsi2+0x64>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	e8 16       	cp	r14, r24
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	f8 06       	cpc	r15, r24
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	08 07       	cpc	r16, r24
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	18 07       	cpc	r17, r24
    2142:	28 f0       	brcs	.+10     	; 0x214e <__clzsi2+0x5c>
    2144:	88 e1       	ldi	r24, 0x18	; 24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 e0       	ldi	r26, 0x00	; 0
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <__clzsi2+0x64>
    214e:	80 e1       	ldi	r24, 0x10	; 16
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 e0       	ldi	r26, 0x00	; 0
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	20 e2       	ldi	r18, 0x20	; 32
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	28 1b       	sub	r18, r24
    2160:	39 0b       	sbc	r19, r25
    2162:	4a 0b       	sbc	r20, r26
    2164:	5b 0b       	sbc	r21, r27
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <__clzsi2+0x7e>
    2168:	16 95       	lsr	r17
    216a:	07 95       	ror	r16
    216c:	f7 94       	ror	r15
    216e:	e7 94       	ror	r14
    2170:	8a 95       	dec	r24
    2172:	d2 f7       	brpl	.-12     	; 0x2168 <__clzsi2+0x76>
    2174:	f7 01       	movw	r30, r14
    2176:	e8 5c       	subi	r30, 0xC8	; 200
    2178:	fe 4f       	sbci	r31, 0xFE	; 254
    217a:	80 81       	ld	r24, Z
    217c:	28 1b       	sub	r18, r24
    217e:	31 09       	sbc	r19, r1
    2180:	41 09       	sbc	r20, r1
    2182:	51 09       	sbc	r21, r1
    2184:	c9 01       	movw	r24, r18
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	08 95       	ret

00002190 <__pack_f>:
    2190:	df 92       	push	r13
    2192:	ef 92       	push	r14
    2194:	ff 92       	push	r15
    2196:	0f 93       	push	r16
    2198:	1f 93       	push	r17
    219a:	fc 01       	movw	r30, r24
    219c:	e4 80       	ldd	r14, Z+4	; 0x04
    219e:	f5 80       	ldd	r15, Z+5	; 0x05
    21a0:	06 81       	ldd	r16, Z+6	; 0x06
    21a2:	17 81       	ldd	r17, Z+7	; 0x07
    21a4:	d1 80       	ldd	r13, Z+1	; 0x01
    21a6:	80 81       	ld	r24, Z
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	48 f4       	brcc	.+18     	; 0x21be <__pack_f+0x2e>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e1       	ldi	r26, 0x10	; 16
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e8 2a       	or	r14, r24
    21b6:	f9 2a       	or	r15, r25
    21b8:	0a 2b       	or	r16, r26
    21ba:	1b 2b       	or	r17, r27
    21bc:	a5 c0       	rjmp	.+330    	; 0x2308 <__pack_f+0x178>
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__pack_f+0x34>
    21c2:	9f c0       	rjmp	.+318    	; 0x2302 <__pack_f+0x172>
    21c4:	82 30       	cpi	r24, 0x02	; 2
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <__pack_f+0x40>
    21c8:	ee 24       	eor	r14, r14
    21ca:	ff 24       	eor	r15, r15
    21cc:	87 01       	movw	r16, r14
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <__pack_f+0x4a>
    21d0:	e1 14       	cp	r14, r1
    21d2:	f1 04       	cpc	r15, r1
    21d4:	01 05       	cpc	r16, r1
    21d6:	11 05       	cpc	r17, r1
    21d8:	19 f4       	brne	.+6      	; 0x21e0 <__pack_f+0x50>
    21da:	e0 e0       	ldi	r30, 0x00	; 0
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	96 c0       	rjmp	.+300    	; 0x230c <__pack_f+0x17c>
    21e0:	62 81       	ldd	r22, Z+2	; 0x02
    21e2:	73 81       	ldd	r23, Z+3	; 0x03
    21e4:	9f ef       	ldi	r25, 0xFF	; 255
    21e6:	62 38       	cpi	r22, 0x82	; 130
    21e8:	79 07       	cpc	r23, r25
    21ea:	0c f0       	brlt	.+2      	; 0x21ee <__pack_f+0x5e>
    21ec:	5b c0       	rjmp	.+182    	; 0x22a4 <__pack_f+0x114>
    21ee:	22 e8       	ldi	r18, 0x82	; 130
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	26 1b       	sub	r18, r22
    21f4:	37 0b       	sbc	r19, r23
    21f6:	2a 31       	cpi	r18, 0x1A	; 26
    21f8:	31 05       	cpc	r19, r1
    21fa:	2c f0       	brlt	.+10     	; 0x2206 <__pack_f+0x76>
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	2a c0       	rjmp	.+84     	; 0x225a <__pack_f+0xca>
    2206:	b8 01       	movw	r22, r16
    2208:	a7 01       	movw	r20, r14
    220a:	02 2e       	mov	r0, r18
    220c:	04 c0       	rjmp	.+8      	; 0x2216 <__pack_f+0x86>
    220e:	76 95       	lsr	r23
    2210:	67 95       	ror	r22
    2212:	57 95       	ror	r21
    2214:	47 95       	ror	r20
    2216:	0a 94       	dec	r0
    2218:	d2 f7       	brpl	.-12     	; 0x220e <__pack_f+0x7e>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e0       	ldi	r26, 0x00	; 0
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	04 c0       	rjmp	.+8      	; 0x222c <__pack_f+0x9c>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	2a 95       	dec	r18
    222e:	d2 f7       	brpl	.-12     	; 0x2224 <__pack_f+0x94>
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	a1 09       	sbc	r26, r1
    2234:	b1 09       	sbc	r27, r1
    2236:	8e 21       	and	r24, r14
    2238:	9f 21       	and	r25, r15
    223a:	a0 23       	and	r26, r16
    223c:	b1 23       	and	r27, r17
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	a1 05       	cpc	r26, r1
    2242:	b1 05       	cpc	r27, r1
    2244:	21 f0       	breq	.+8      	; 0x224e <__pack_f+0xbe>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	a0 e0       	ldi	r26, 0x00	; 0
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	9a 01       	movw	r18, r20
    2250:	ab 01       	movw	r20, r22
    2252:	28 2b       	or	r18, r24
    2254:	39 2b       	or	r19, r25
    2256:	4a 2b       	or	r20, r26
    2258:	5b 2b       	or	r21, r27
    225a:	da 01       	movw	r26, r20
    225c:	c9 01       	movw	r24, r18
    225e:	8f 77       	andi	r24, 0x7F	; 127
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	a0 70       	andi	r26, 0x00	; 0
    2264:	b0 70       	andi	r27, 0x00	; 0
    2266:	80 34       	cpi	r24, 0x40	; 64
    2268:	91 05       	cpc	r25, r1
    226a:	a1 05       	cpc	r26, r1
    226c:	b1 05       	cpc	r27, r1
    226e:	39 f4       	brne	.+14     	; 0x227e <__pack_f+0xee>
    2270:	27 ff       	sbrs	r18, 7
    2272:	09 c0       	rjmp	.+18     	; 0x2286 <__pack_f+0xf6>
    2274:	20 5c       	subi	r18, 0xC0	; 192
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
    2278:	4f 4f       	sbci	r20, 0xFF	; 255
    227a:	5f 4f       	sbci	r21, 0xFF	; 255
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <__pack_f+0xf6>
    227e:	21 5c       	subi	r18, 0xC1	; 193
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	4f 4f       	sbci	r20, 0xFF	; 255
    2284:	5f 4f       	sbci	r21, 0xFF	; 255
    2286:	e0 e0       	ldi	r30, 0x00	; 0
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	20 30       	cpi	r18, 0x00	; 0
    228c:	a0 e0       	ldi	r26, 0x00	; 0
    228e:	3a 07       	cpc	r19, r26
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	4a 07       	cpc	r20, r26
    2294:	a0 e4       	ldi	r26, 0x40	; 64
    2296:	5a 07       	cpc	r21, r26
    2298:	10 f0       	brcs	.+4      	; 0x229e <__pack_f+0x10e>
    229a:	e1 e0       	ldi	r30, 0x01	; 1
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	79 01       	movw	r14, r18
    22a0:	8a 01       	movw	r16, r20
    22a2:	27 c0       	rjmp	.+78     	; 0x22f2 <__pack_f+0x162>
    22a4:	60 38       	cpi	r22, 0x80	; 128
    22a6:	71 05       	cpc	r23, r1
    22a8:	64 f5       	brge	.+88     	; 0x2302 <__pack_f+0x172>
    22aa:	fb 01       	movw	r30, r22
    22ac:	e1 58       	subi	r30, 0x81	; 129
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	d8 01       	movw	r26, r16
    22b2:	c7 01       	movw	r24, r14
    22b4:	8f 77       	andi	r24, 0x7F	; 127
    22b6:	90 70       	andi	r25, 0x00	; 0
    22b8:	a0 70       	andi	r26, 0x00	; 0
    22ba:	b0 70       	andi	r27, 0x00	; 0
    22bc:	80 34       	cpi	r24, 0x40	; 64
    22be:	91 05       	cpc	r25, r1
    22c0:	a1 05       	cpc	r26, r1
    22c2:	b1 05       	cpc	r27, r1
    22c4:	39 f4       	brne	.+14     	; 0x22d4 <__pack_f+0x144>
    22c6:	e7 fe       	sbrs	r14, 7
    22c8:	0d c0       	rjmp	.+26     	; 0x22e4 <__pack_f+0x154>
    22ca:	80 e4       	ldi	r24, 0x40	; 64
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	a0 e0       	ldi	r26, 0x00	; 0
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <__pack_f+0x14c>
    22d4:	8f e3       	ldi	r24, 0x3F	; 63
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a0 e0       	ldi	r26, 0x00	; 0
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e8 0e       	add	r14, r24
    22de:	f9 1e       	adc	r15, r25
    22e0:	0a 1f       	adc	r16, r26
    22e2:	1b 1f       	adc	r17, r27
    22e4:	17 ff       	sbrs	r17, 7
    22e6:	05 c0       	rjmp	.+10     	; 0x22f2 <__pack_f+0x162>
    22e8:	16 95       	lsr	r17
    22ea:	07 95       	ror	r16
    22ec:	f7 94       	ror	r15
    22ee:	e7 94       	ror	r14
    22f0:	31 96       	adiw	r30, 0x01	; 1
    22f2:	87 e0       	ldi	r24, 0x07	; 7
    22f4:	16 95       	lsr	r17
    22f6:	07 95       	ror	r16
    22f8:	f7 94       	ror	r15
    22fa:	e7 94       	ror	r14
    22fc:	8a 95       	dec	r24
    22fe:	d1 f7       	brne	.-12     	; 0x22f4 <__pack_f+0x164>
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x17c>
    2302:	ee 24       	eor	r14, r14
    2304:	ff 24       	eor	r15, r15
    2306:	87 01       	movw	r16, r14
    2308:	ef ef       	ldi	r30, 0xFF	; 255
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	6e 2f       	mov	r22, r30
    230e:	67 95       	ror	r22
    2310:	66 27       	eor	r22, r22
    2312:	67 95       	ror	r22
    2314:	90 2f       	mov	r25, r16
    2316:	9f 77       	andi	r25, 0x7F	; 127
    2318:	d7 94       	ror	r13
    231a:	dd 24       	eor	r13, r13
    231c:	d7 94       	ror	r13
    231e:	8e 2f       	mov	r24, r30
    2320:	86 95       	lsr	r24
    2322:	49 2f       	mov	r20, r25
    2324:	46 2b       	or	r20, r22
    2326:	58 2f       	mov	r21, r24
    2328:	5d 29       	or	r21, r13
    232a:	b7 01       	movw	r22, r14
    232c:	ca 01       	movw	r24, r20
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	ff 90       	pop	r15
    2334:	ef 90       	pop	r14
    2336:	df 90       	pop	r13
    2338:	08 95       	ret

0000233a <__unpack_f>:
    233a:	fc 01       	movw	r30, r24
    233c:	db 01       	movw	r26, r22
    233e:	40 81       	ld	r20, Z
    2340:	51 81       	ldd	r21, Z+1	; 0x01
    2342:	22 81       	ldd	r18, Z+2	; 0x02
    2344:	62 2f       	mov	r22, r18
    2346:	6f 77       	andi	r22, 0x7F	; 127
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	22 1f       	adc	r18, r18
    234c:	22 27       	eor	r18, r18
    234e:	22 1f       	adc	r18, r18
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	89 2f       	mov	r24, r25
    2354:	88 0f       	add	r24, r24
    2356:	82 2b       	or	r24, r18
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	99 1f       	adc	r25, r25
    235e:	99 27       	eor	r25, r25
    2360:	99 1f       	adc	r25, r25
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	9c 93       	st	X, r25
    2366:	11 97       	sbiw	r26, 0x01	; 1
    2368:	21 15       	cp	r18, r1
    236a:	31 05       	cpc	r19, r1
    236c:	a9 f5       	brne	.+106    	; 0x23d8 <__unpack_f+0x9e>
    236e:	41 15       	cp	r20, r1
    2370:	51 05       	cpc	r21, r1
    2372:	61 05       	cpc	r22, r1
    2374:	71 05       	cpc	r23, r1
    2376:	11 f4       	brne	.+4      	; 0x237c <__unpack_f+0x42>
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	37 c0       	rjmp	.+110    	; 0x23ea <__unpack_f+0xb0>
    237c:	82 e8       	ldi	r24, 0x82	; 130
    237e:	9f ef       	ldi	r25, 0xFF	; 255
    2380:	13 96       	adiw	r26, 0x03	; 3
    2382:	9c 93       	st	X, r25
    2384:	8e 93       	st	-X, r24
    2386:	12 97       	sbiw	r26, 0x02	; 2
    2388:	9a 01       	movw	r18, r20
    238a:	ab 01       	movw	r20, r22
    238c:	67 e0       	ldi	r22, 0x07	; 7
    238e:	22 0f       	add	r18, r18
    2390:	33 1f       	adc	r19, r19
    2392:	44 1f       	adc	r20, r20
    2394:	55 1f       	adc	r21, r21
    2396:	6a 95       	dec	r22
    2398:	d1 f7       	brne	.-12     	; 0x238e <__unpack_f+0x54>
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	8c 93       	st	X, r24
    239e:	0d c0       	rjmp	.+26     	; 0x23ba <__unpack_f+0x80>
    23a0:	22 0f       	add	r18, r18
    23a2:	33 1f       	adc	r19, r19
    23a4:	44 1f       	adc	r20, r20
    23a6:	55 1f       	adc	r21, r21
    23a8:	12 96       	adiw	r26, 0x02	; 2
    23aa:	8d 91       	ld	r24, X+
    23ac:	9c 91       	ld	r25, X
    23ae:	13 97       	sbiw	r26, 0x03	; 3
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	13 96       	adiw	r26, 0x03	; 3
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24
    23b8:	12 97       	sbiw	r26, 0x02	; 2
    23ba:	20 30       	cpi	r18, 0x00	; 0
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	38 07       	cpc	r19, r24
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	48 07       	cpc	r20, r24
    23c4:	80 e4       	ldi	r24, 0x40	; 64
    23c6:	58 07       	cpc	r21, r24
    23c8:	58 f3       	brcs	.-42     	; 0x23a0 <__unpack_f+0x66>
    23ca:	14 96       	adiw	r26, 0x04	; 4
    23cc:	2d 93       	st	X+, r18
    23ce:	3d 93       	st	X+, r19
    23d0:	4d 93       	st	X+, r20
    23d2:	5c 93       	st	X, r21
    23d4:	17 97       	sbiw	r26, 0x07	; 7
    23d6:	08 95       	ret
    23d8:	2f 3f       	cpi	r18, 0xFF	; 255
    23da:	31 05       	cpc	r19, r1
    23dc:	79 f4       	brne	.+30     	; 0x23fc <__unpack_f+0xc2>
    23de:	41 15       	cp	r20, r1
    23e0:	51 05       	cpc	r21, r1
    23e2:	61 05       	cpc	r22, r1
    23e4:	71 05       	cpc	r23, r1
    23e6:	19 f4       	brne	.+6      	; 0x23ee <__unpack_f+0xb4>
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	8c 93       	st	X, r24
    23ec:	08 95       	ret
    23ee:	64 ff       	sbrs	r22, 4
    23f0:	03 c0       	rjmp	.+6      	; 0x23f8 <__unpack_f+0xbe>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	8c 93       	st	X, r24
    23f6:	12 c0       	rjmp	.+36     	; 0x241c <__unpack_f+0xe2>
    23f8:	1c 92       	st	X, r1
    23fa:	10 c0       	rjmp	.+32     	; 0x241c <__unpack_f+0xe2>
    23fc:	2f 57       	subi	r18, 0x7F	; 127
    23fe:	30 40       	sbci	r19, 0x00	; 0
    2400:	13 96       	adiw	r26, 0x03	; 3
    2402:	3c 93       	st	X, r19
    2404:	2e 93       	st	-X, r18
    2406:	12 97       	sbiw	r26, 0x02	; 2
    2408:	83 e0       	ldi	r24, 0x03	; 3
    240a:	8c 93       	st	X, r24
    240c:	87 e0       	ldi	r24, 0x07	; 7
    240e:	44 0f       	add	r20, r20
    2410:	55 1f       	adc	r21, r21
    2412:	66 1f       	adc	r22, r22
    2414:	77 1f       	adc	r23, r23
    2416:	8a 95       	dec	r24
    2418:	d1 f7       	brne	.-12     	; 0x240e <__unpack_f+0xd4>
    241a:	70 64       	ori	r23, 0x40	; 64
    241c:	14 96       	adiw	r26, 0x04	; 4
    241e:	4d 93       	st	X+, r20
    2420:	5d 93       	st	X+, r21
    2422:	6d 93       	st	X+, r22
    2424:	7c 93       	st	X, r23
    2426:	17 97       	sbiw	r26, 0x07	; 7
    2428:	08 95       	ret

0000242a <__fpcmp_parts_f>:
    242a:	1f 93       	push	r17
    242c:	dc 01       	movw	r26, r24
    242e:	fb 01       	movw	r30, r22
    2430:	9c 91       	ld	r25, X
    2432:	92 30       	cpi	r25, 0x02	; 2
    2434:	08 f4       	brcc	.+2      	; 0x2438 <__fpcmp_parts_f+0xe>
    2436:	47 c0       	rjmp	.+142    	; 0x24c6 <__fpcmp_parts_f+0x9c>
    2438:	80 81       	ld	r24, Z
    243a:	82 30       	cpi	r24, 0x02	; 2
    243c:	08 f4       	brcc	.+2      	; 0x2440 <__fpcmp_parts_f+0x16>
    243e:	43 c0       	rjmp	.+134    	; 0x24c6 <__fpcmp_parts_f+0x9c>
    2440:	94 30       	cpi	r25, 0x04	; 4
    2442:	51 f4       	brne	.+20     	; 0x2458 <__fpcmp_parts_f+0x2e>
    2444:	11 96       	adiw	r26, 0x01	; 1
    2446:	1c 91       	ld	r17, X
    2448:	84 30       	cpi	r24, 0x04	; 4
    244a:	99 f5       	brne	.+102    	; 0x24b2 <__fpcmp_parts_f+0x88>
    244c:	81 81       	ldd	r24, Z+1	; 0x01
    244e:	68 2f       	mov	r22, r24
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	61 1b       	sub	r22, r17
    2454:	71 09       	sbc	r23, r1
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <__fpcmp_parts_f+0xac>
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	21 f0       	breq	.+8      	; 0x2464 <__fpcmp_parts_f+0x3a>
    245c:	92 30       	cpi	r25, 0x02	; 2
    245e:	31 f4       	brne	.+12     	; 0x246c <__fpcmp_parts_f+0x42>
    2460:	82 30       	cpi	r24, 0x02	; 2
    2462:	b9 f1       	breq	.+110    	; 0x24d2 <__fpcmp_parts_f+0xa8>
    2464:	81 81       	ldd	r24, Z+1	; 0x01
    2466:	88 23       	and	r24, r24
    2468:	89 f1       	breq	.+98     	; 0x24cc <__fpcmp_parts_f+0xa2>
    246a:	2d c0       	rjmp	.+90     	; 0x24c6 <__fpcmp_parts_f+0x9c>
    246c:	11 96       	adiw	r26, 0x01	; 1
    246e:	1c 91       	ld	r17, X
    2470:	11 97       	sbiw	r26, 0x01	; 1
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	f1 f0       	breq	.+60     	; 0x24b2 <__fpcmp_parts_f+0x88>
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	18 17       	cp	r17, r24
    247a:	d9 f4       	brne	.+54     	; 0x24b2 <__fpcmp_parts_f+0x88>
    247c:	12 96       	adiw	r26, 0x02	; 2
    247e:	2d 91       	ld	r18, X+
    2480:	3c 91       	ld	r19, X
    2482:	13 97       	sbiw	r26, 0x03	; 3
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	82 17       	cp	r24, r18
    248a:	93 07       	cpc	r25, r19
    248c:	94 f0       	brlt	.+36     	; 0x24b2 <__fpcmp_parts_f+0x88>
    248e:	28 17       	cp	r18, r24
    2490:	39 07       	cpc	r19, r25
    2492:	bc f0       	brlt	.+46     	; 0x24c2 <__fpcmp_parts_f+0x98>
    2494:	14 96       	adiw	r26, 0x04	; 4
    2496:	8d 91       	ld	r24, X+
    2498:	9d 91       	ld	r25, X+
    249a:	0d 90       	ld	r0, X+
    249c:	bc 91       	ld	r27, X
    249e:	a0 2d       	mov	r26, r0
    24a0:	24 81       	ldd	r18, Z+4	; 0x04
    24a2:	35 81       	ldd	r19, Z+5	; 0x05
    24a4:	46 81       	ldd	r20, Z+6	; 0x06
    24a6:	57 81       	ldd	r21, Z+7	; 0x07
    24a8:	28 17       	cp	r18, r24
    24aa:	39 07       	cpc	r19, r25
    24ac:	4a 07       	cpc	r20, r26
    24ae:	5b 07       	cpc	r21, r27
    24b0:	18 f4       	brcc	.+6      	; 0x24b8 <__fpcmp_parts_f+0x8e>
    24b2:	11 23       	and	r17, r17
    24b4:	41 f0       	breq	.+16     	; 0x24c6 <__fpcmp_parts_f+0x9c>
    24b6:	0a c0       	rjmp	.+20     	; 0x24cc <__fpcmp_parts_f+0xa2>
    24b8:	82 17       	cp	r24, r18
    24ba:	93 07       	cpc	r25, r19
    24bc:	a4 07       	cpc	r26, r20
    24be:	b5 07       	cpc	r27, r21
    24c0:	40 f4       	brcc	.+16     	; 0x24d2 <__fpcmp_parts_f+0xa8>
    24c2:	11 23       	and	r17, r17
    24c4:	19 f0       	breq	.+6      	; 0x24cc <__fpcmp_parts_f+0xa2>
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	70 e0       	ldi	r23, 0x00	; 0
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <__fpcmp_parts_f+0xac>
    24cc:	6f ef       	ldi	r22, 0xFF	; 255
    24ce:	7f ef       	ldi	r23, 0xFF	; 255
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <__fpcmp_parts_f+0xac>
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	cb 01       	movw	r24, r22
    24d8:	1f 91       	pop	r17
    24da:	08 95       	ret

000024dc <itoa>:
    24dc:	fb 01       	movw	r30, r22
    24de:	9f 01       	movw	r18, r30
    24e0:	e8 94       	clt
    24e2:	42 30       	cpi	r20, 0x02	; 2
    24e4:	c4 f0       	brlt	.+48     	; 0x2516 <itoa+0x3a>
    24e6:	45 32       	cpi	r20, 0x25	; 37
    24e8:	b4 f4       	brge	.+44     	; 0x2516 <itoa+0x3a>
    24ea:	4a 30       	cpi	r20, 0x0A	; 10
    24ec:	29 f4       	brne	.+10     	; 0x24f8 <itoa+0x1c>
    24ee:	97 fb       	bst	r25, 7
    24f0:	1e f4       	brtc	.+6      	; 0x24f8 <itoa+0x1c>
    24f2:	90 95       	com	r25
    24f4:	81 95       	neg	r24
    24f6:	9f 4f       	sbci	r25, 0xFF	; 255
    24f8:	64 2f       	mov	r22, r20
    24fa:	77 27       	eor	r23, r23
    24fc:	0e 94 9f 12 	call	0x253e	; 0x253e <__udivmodhi4>
    2500:	80 5d       	subi	r24, 0xD0	; 208
    2502:	8a 33       	cpi	r24, 0x3A	; 58
    2504:	0c f0       	brlt	.+2      	; 0x2508 <itoa+0x2c>
    2506:	89 5d       	subi	r24, 0xD9	; 217
    2508:	81 93       	st	Z+, r24
    250a:	cb 01       	movw	r24, r22
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	a1 f7       	brne	.-24     	; 0x24f8 <itoa+0x1c>
    2510:	16 f4       	brtc	.+4      	; 0x2516 <itoa+0x3a>
    2512:	5d e2       	ldi	r21, 0x2D	; 45
    2514:	51 93       	st	Z+, r21
    2516:	10 82       	st	Z, r1
    2518:	c9 01       	movw	r24, r18
    251a:	0c 94 8f 12 	jmp	0x251e	; 0x251e <strrev>

0000251e <strrev>:
    251e:	dc 01       	movw	r26, r24
    2520:	fc 01       	movw	r30, r24
    2522:	67 2f       	mov	r22, r23
    2524:	71 91       	ld	r23, Z+
    2526:	77 23       	and	r23, r23
    2528:	e1 f7       	brne	.-8      	; 0x2522 <strrev+0x4>
    252a:	32 97       	sbiw	r30, 0x02	; 2
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <strrev+0x18>
    252e:	7c 91       	ld	r23, X
    2530:	6d 93       	st	X+, r22
    2532:	70 83       	st	Z, r23
    2534:	62 91       	ld	r22, -Z
    2536:	ae 17       	cp	r26, r30
    2538:	bf 07       	cpc	r27, r31
    253a:	c8 f3       	brcs	.-14     	; 0x252e <strrev+0x10>
    253c:	08 95       	ret

0000253e <__udivmodhi4>:
    253e:	aa 1b       	sub	r26, r26
    2540:	bb 1b       	sub	r27, r27
    2542:	51 e1       	ldi	r21, 0x11	; 17
    2544:	07 c0       	rjmp	.+14     	; 0x2554 <__udivmodhi4_ep>

00002546 <__udivmodhi4_loop>:
    2546:	aa 1f       	adc	r26, r26
    2548:	bb 1f       	adc	r27, r27
    254a:	a6 17       	cp	r26, r22
    254c:	b7 07       	cpc	r27, r23
    254e:	10 f0       	brcs	.+4      	; 0x2554 <__udivmodhi4_ep>
    2550:	a6 1b       	sub	r26, r22
    2552:	b7 0b       	sbc	r27, r23

00002554 <__udivmodhi4_ep>:
    2554:	88 1f       	adc	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	5a 95       	dec	r21
    255a:	a9 f7       	brne	.-22     	; 0x2546 <__udivmodhi4_loop>
    255c:	80 95       	com	r24
    255e:	90 95       	com	r25
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	08 95       	ret

00002566 <__prologue_saves__>:
    2566:	2f 92       	push	r2
    2568:	3f 92       	push	r3
    256a:	4f 92       	push	r4
    256c:	5f 92       	push	r5
    256e:	6f 92       	push	r6
    2570:	7f 92       	push	r7
    2572:	8f 92       	push	r8
    2574:	9f 92       	push	r9
    2576:	af 92       	push	r10
    2578:	bf 92       	push	r11
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	ca 1b       	sub	r28, r26
    2590:	db 0b       	sbc	r29, r27
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	09 94       	ijmp

0000259e <__epilogue_restores__>:
    259e:	2a 88       	ldd	r2, Y+18	; 0x12
    25a0:	39 88       	ldd	r3, Y+17	; 0x11
    25a2:	48 88       	ldd	r4, Y+16	; 0x10
    25a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    25ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b0:	b9 84       	ldd	r11, Y+9	; 0x09
    25b2:	c8 84       	ldd	r12, Y+8	; 0x08
    25b4:	df 80       	ldd	r13, Y+7	; 0x07
    25b6:	ee 80       	ldd	r14, Y+6	; 0x06
    25b8:	fd 80       	ldd	r15, Y+5	; 0x05
    25ba:	0c 81       	ldd	r16, Y+4	; 0x04
    25bc:	1b 81       	ldd	r17, Y+3	; 0x03
    25be:	aa 81       	ldd	r26, Y+2	; 0x02
    25c0:	b9 81       	ldd	r27, Y+1	; 0x01
    25c2:	ce 0f       	add	r28, r30
    25c4:	d1 1d       	adc	r29, r1
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	ed 01       	movw	r28, r26
    25d2:	08 95       	ret
    25d4:	0e f0       	brts	.+2      	; 0x25d8 <__epilogue_restores__+0x3a>
    25d6:	0a c1       	rjmp	.+532    	; 0x27ec <__fp_mpack>
    25d8:	19 c1       	rjmp	.+562    	; 0x280c <__fp_nan>
    25da:	68 94       	set
    25dc:	01 c1       	rjmp	.+514    	; 0x27e0 <__fp_inf>

000025de <log>:
    25de:	65 d1       	rcall	.+714    	; 0x28aa <__fp_splitA>
    25e0:	c8 f3       	brcs	.-14     	; 0x25d4 <__epilogue_restores__+0x36>
    25e2:	99 23       	and	r25, r25
    25e4:	d1 f3       	breq	.-12     	; 0x25da <__epilogue_restores__+0x3c>
    25e6:	c6 f3       	brts	.-16     	; 0x25d8 <__epilogue_restores__+0x3a>
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	1f 93       	push	r17
    25ee:	0f 93       	push	r16
    25f0:	ff 92       	push	r15
    25f2:	c9 2f       	mov	r28, r25
    25f4:	dd 27       	eor	r29, r29
    25f6:	88 23       	and	r24, r24
    25f8:	2a f0       	brmi	.+10     	; 0x2604 <log+0x26>
    25fa:	21 97       	sbiw	r28, 0x01	; 1
    25fc:	66 0f       	add	r22, r22
    25fe:	77 1f       	adc	r23, r23
    2600:	88 1f       	adc	r24, r24
    2602:	da f7       	brpl	.-10     	; 0x25fa <log+0x1c>
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e8       	ldi	r20, 0x80	; 128
    260a:	5f eb       	ldi	r21, 0xBF	; 191
    260c:	9f e3       	ldi	r25, 0x3F	; 63
    260e:	88 39       	cpi	r24, 0x98	; 152
    2610:	20 f0       	brcs	.+8      	; 0x261a <log+0x3c>
    2612:	80 3e       	cpi	r24, 0xE0	; 224
    2614:	30 f0       	brcs	.+12     	; 0x2622 <log+0x44>
    2616:	21 96       	adiw	r28, 0x01	; 1
    2618:	8f 77       	andi	r24, 0x7F	; 127
    261a:	dd d9       	rcall	.-3142   	; 0x19d6 <__addsf3>
    261c:	ec e5       	ldi	r30, 0x5C	; 92
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <log+0x4a>
    2622:	d9 d9       	rcall	.-3150   	; 0x19d6 <__addsf3>
    2624:	e9 e8       	ldi	r30, 0x89	; 137
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	f4 d0       	rcall	.+488    	; 0x2812 <__fp_powser>
    262a:	8b 01       	movw	r16, r22
    262c:	be 01       	movw	r22, r28
    262e:	ec 01       	movw	r28, r24
    2630:	fb 2e       	mov	r15, r27
    2632:	6f 57       	subi	r22, 0x7F	; 127
    2634:	71 09       	sbc	r23, r1
    2636:	75 95       	asr	r23
    2638:	77 1f       	adc	r23, r23
    263a:	88 0b       	sbc	r24, r24
    263c:	99 0b       	sbc	r25, r25
    263e:	2e dc       	rcall	.-1956   	; 0x1e9c <__floatsisf>
    2640:	28 e1       	ldi	r18, 0x18	; 24
    2642:	32 e7       	ldi	r19, 0x72	; 114
    2644:	41 e3       	ldi	r20, 0x31	; 49
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	14 d0       	rcall	.+40     	; 0x2672 <__mulsf3x>
    264a:	af 2d       	mov	r26, r15
    264c:	98 01       	movw	r18, r16
    264e:	ae 01       	movw	r20, r28
    2650:	ff 90       	pop	r15
    2652:	0f 91       	pop	r16
    2654:	1f 91       	pop	r17
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	6f d0       	rcall	.+222    	; 0x273a <__addsf3x>
    265c:	0d c1       	rjmp	.+538    	; 0x2878 <__fp_round>
    265e:	fe d0       	rcall	.+508    	; 0x285c <__fp_pscA>
    2660:	28 f0       	brcs	.+10     	; 0x266c <log+0x8e>
    2662:	03 d1       	rcall	.+518    	; 0x286a <__fp_pscB>
    2664:	18 f0       	brcs	.+6      	; 0x266c <log+0x8e>
    2666:	95 23       	and	r25, r21
    2668:	09 f0       	breq	.+2      	; 0x266c <log+0x8e>
    266a:	ba c0       	rjmp	.+372    	; 0x27e0 <__fp_inf>
    266c:	cf c0       	rjmp	.+414    	; 0x280c <__fp_nan>
    266e:	11 24       	eor	r1, r1
    2670:	37 c1       	rjmp	.+622    	; 0x28e0 <__fp_szero>

00002672 <__mulsf3x>:
    2672:	13 d1       	rcall	.+550    	; 0x289a <__fp_split3>
    2674:	a0 f3       	brcs	.-24     	; 0x265e <log+0x80>

00002676 <__mulsf3_pse>:
    2676:	95 9f       	mul	r25, r21
    2678:	d1 f3       	breq	.-12     	; 0x266e <log+0x90>
    267a:	95 0f       	add	r25, r21
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	55 1f       	adc	r21, r21
    2680:	62 9f       	mul	r22, r18
    2682:	f0 01       	movw	r30, r0
    2684:	72 9f       	mul	r23, r18
    2686:	bb 27       	eor	r27, r27
    2688:	f0 0d       	add	r31, r0
    268a:	b1 1d       	adc	r27, r1
    268c:	63 9f       	mul	r22, r19
    268e:	aa 27       	eor	r26, r26
    2690:	f0 0d       	add	r31, r0
    2692:	b1 1d       	adc	r27, r1
    2694:	aa 1f       	adc	r26, r26
    2696:	64 9f       	mul	r22, r20
    2698:	66 27       	eor	r22, r22
    269a:	b0 0d       	add	r27, r0
    269c:	a1 1d       	adc	r26, r1
    269e:	66 1f       	adc	r22, r22
    26a0:	82 9f       	mul	r24, r18
    26a2:	22 27       	eor	r18, r18
    26a4:	b0 0d       	add	r27, r0
    26a6:	a1 1d       	adc	r26, r1
    26a8:	62 1f       	adc	r22, r18
    26aa:	73 9f       	mul	r23, r19
    26ac:	b0 0d       	add	r27, r0
    26ae:	a1 1d       	adc	r26, r1
    26b0:	62 1f       	adc	r22, r18
    26b2:	83 9f       	mul	r24, r19
    26b4:	a0 0d       	add	r26, r0
    26b6:	61 1d       	adc	r22, r1
    26b8:	22 1f       	adc	r18, r18
    26ba:	74 9f       	mul	r23, r20
    26bc:	33 27       	eor	r19, r19
    26be:	a0 0d       	add	r26, r0
    26c0:	61 1d       	adc	r22, r1
    26c2:	23 1f       	adc	r18, r19
    26c4:	84 9f       	mul	r24, r20
    26c6:	60 0d       	add	r22, r0
    26c8:	21 1d       	adc	r18, r1
    26ca:	82 2f       	mov	r24, r18
    26cc:	76 2f       	mov	r23, r22
    26ce:	6a 2f       	mov	r22, r26
    26d0:	11 24       	eor	r1, r1
    26d2:	9f 57       	subi	r25, 0x7F	; 127
    26d4:	50 40       	sbci	r21, 0x00	; 0
    26d6:	8a f0       	brmi	.+34     	; 0x26fa <__mulsf3_pse+0x84>
    26d8:	e1 f0       	breq	.+56     	; 0x2712 <__mulsf3_pse+0x9c>
    26da:	88 23       	and	r24, r24
    26dc:	4a f0       	brmi	.+18     	; 0x26f0 <__mulsf3_pse+0x7a>
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	bb 1f       	adc	r27, r27
    26e4:	66 1f       	adc	r22, r22
    26e6:	77 1f       	adc	r23, r23
    26e8:	88 1f       	adc	r24, r24
    26ea:	91 50       	subi	r25, 0x01	; 1
    26ec:	50 40       	sbci	r21, 0x00	; 0
    26ee:	a9 f7       	brne	.-22     	; 0x26da <__mulsf3_pse+0x64>
    26f0:	9e 3f       	cpi	r25, 0xFE	; 254
    26f2:	51 05       	cpc	r21, r1
    26f4:	70 f0       	brcs	.+28     	; 0x2712 <__mulsf3_pse+0x9c>
    26f6:	74 c0       	rjmp	.+232    	; 0x27e0 <__fp_inf>
    26f8:	f3 c0       	rjmp	.+486    	; 0x28e0 <__fp_szero>
    26fa:	5f 3f       	cpi	r21, 0xFF	; 255
    26fc:	ec f3       	brlt	.-6      	; 0x26f8 <__mulsf3_pse+0x82>
    26fe:	98 3e       	cpi	r25, 0xE8	; 232
    2700:	dc f3       	brlt	.-10     	; 0x26f8 <__mulsf3_pse+0x82>
    2702:	86 95       	lsr	r24
    2704:	77 95       	ror	r23
    2706:	67 95       	ror	r22
    2708:	b7 95       	ror	r27
    270a:	f7 95       	ror	r31
    270c:	e7 95       	ror	r30
    270e:	9f 5f       	subi	r25, 0xFF	; 255
    2710:	c1 f7       	brne	.-16     	; 0x2702 <__mulsf3_pse+0x8c>
    2712:	fe 2b       	or	r31, r30
    2714:	88 0f       	add	r24, r24
    2716:	91 1d       	adc	r25, r1
    2718:	96 95       	lsr	r25
    271a:	87 95       	ror	r24
    271c:	97 f9       	bld	r25, 7
    271e:	08 95       	ret
    2720:	9d d0       	rcall	.+314    	; 0x285c <__fp_pscA>
    2722:	30 f0       	brcs	.+12     	; 0x2730 <__mulsf3_pse+0xba>
    2724:	a2 d0       	rcall	.+324    	; 0x286a <__fp_pscB>
    2726:	20 f0       	brcs	.+8      	; 0x2730 <__mulsf3_pse+0xba>
    2728:	31 f4       	brne	.+12     	; 0x2736 <__mulsf3_pse+0xc0>
    272a:	9f 3f       	cpi	r25, 0xFF	; 255
    272c:	11 f4       	brne	.+4      	; 0x2732 <__mulsf3_pse+0xbc>
    272e:	1e f4       	brtc	.+6      	; 0x2736 <__mulsf3_pse+0xc0>
    2730:	6d c0       	rjmp	.+218    	; 0x280c <__fp_nan>
    2732:	0e f4       	brtc	.+2      	; 0x2736 <__mulsf3_pse+0xc0>
    2734:	e0 95       	com	r30
    2736:	e7 fb       	bst	r30, 7
    2738:	53 c0       	rjmp	.+166    	; 0x27e0 <__fp_inf>

0000273a <__addsf3x>:
    273a:	e9 2f       	mov	r30, r25
    273c:	ae d0       	rcall	.+348    	; 0x289a <__fp_split3>
    273e:	80 f3       	brcs	.-32     	; 0x2720 <__mulsf3_pse+0xaa>
    2740:	ba 17       	cp	r27, r26
    2742:	62 07       	cpc	r22, r18
    2744:	73 07       	cpc	r23, r19
    2746:	84 07       	cpc	r24, r20
    2748:	95 07       	cpc	r25, r21
    274a:	18 f0       	brcs	.+6      	; 0x2752 <__addsf3x+0x18>
    274c:	71 f4       	brne	.+28     	; 0x276a <__addsf3x+0x30>
    274e:	9e f5       	brtc	.+102    	; 0x27b6 <__addsf3x+0x7c>
    2750:	c6 c0       	rjmp	.+396    	; 0x28de <__fp_zero>
    2752:	0e f4       	brtc	.+2      	; 0x2756 <__addsf3x+0x1c>
    2754:	e0 95       	com	r30
    2756:	0b 2e       	mov	r0, r27
    2758:	ba 2f       	mov	r27, r26
    275a:	a0 2d       	mov	r26, r0
    275c:	0b 01       	movw	r0, r22
    275e:	b9 01       	movw	r22, r18
    2760:	90 01       	movw	r18, r0
    2762:	0c 01       	movw	r0, r24
    2764:	ca 01       	movw	r24, r20
    2766:	a0 01       	movw	r20, r0
    2768:	11 24       	eor	r1, r1
    276a:	ff 27       	eor	r31, r31
    276c:	59 1b       	sub	r21, r25
    276e:	99 f0       	breq	.+38     	; 0x2796 <__addsf3x+0x5c>
    2770:	59 3f       	cpi	r21, 0xF9	; 249
    2772:	50 f4       	brcc	.+20     	; 0x2788 <__addsf3x+0x4e>
    2774:	50 3e       	cpi	r21, 0xE0	; 224
    2776:	68 f1       	brcs	.+90     	; 0x27d2 <__addsf3x+0x98>
    2778:	1a 16       	cp	r1, r26
    277a:	f0 40       	sbci	r31, 0x00	; 0
    277c:	a2 2f       	mov	r26, r18
    277e:	23 2f       	mov	r18, r19
    2780:	34 2f       	mov	r19, r20
    2782:	44 27       	eor	r20, r20
    2784:	58 5f       	subi	r21, 0xF8	; 248
    2786:	f3 cf       	rjmp	.-26     	; 0x276e <__addsf3x+0x34>
    2788:	46 95       	lsr	r20
    278a:	37 95       	ror	r19
    278c:	27 95       	ror	r18
    278e:	a7 95       	ror	r26
    2790:	f0 40       	sbci	r31, 0x00	; 0
    2792:	53 95       	inc	r21
    2794:	c9 f7       	brne	.-14     	; 0x2788 <__addsf3x+0x4e>
    2796:	7e f4       	brtc	.+30     	; 0x27b6 <__addsf3x+0x7c>
    2798:	1f 16       	cp	r1, r31
    279a:	ba 0b       	sbc	r27, r26
    279c:	62 0b       	sbc	r22, r18
    279e:	73 0b       	sbc	r23, r19
    27a0:	84 0b       	sbc	r24, r20
    27a2:	ba f0       	brmi	.+46     	; 0x27d2 <__addsf3x+0x98>
    27a4:	91 50       	subi	r25, 0x01	; 1
    27a6:	a1 f0       	breq	.+40     	; 0x27d0 <__addsf3x+0x96>
    27a8:	ff 0f       	add	r31, r31
    27aa:	bb 1f       	adc	r27, r27
    27ac:	66 1f       	adc	r22, r22
    27ae:	77 1f       	adc	r23, r23
    27b0:	88 1f       	adc	r24, r24
    27b2:	c2 f7       	brpl	.-16     	; 0x27a4 <__addsf3x+0x6a>
    27b4:	0e c0       	rjmp	.+28     	; 0x27d2 <__addsf3x+0x98>
    27b6:	ba 0f       	add	r27, r26
    27b8:	62 1f       	adc	r22, r18
    27ba:	73 1f       	adc	r23, r19
    27bc:	84 1f       	adc	r24, r20
    27be:	48 f4       	brcc	.+18     	; 0x27d2 <__addsf3x+0x98>
    27c0:	87 95       	ror	r24
    27c2:	77 95       	ror	r23
    27c4:	67 95       	ror	r22
    27c6:	b7 95       	ror	r27
    27c8:	f7 95       	ror	r31
    27ca:	9e 3f       	cpi	r25, 0xFE	; 254
    27cc:	08 f0       	brcs	.+2      	; 0x27d0 <__addsf3x+0x96>
    27ce:	b3 cf       	rjmp	.-154    	; 0x2736 <__mulsf3_pse+0xc0>
    27d0:	93 95       	inc	r25
    27d2:	88 0f       	add	r24, r24
    27d4:	08 f0       	brcs	.+2      	; 0x27d8 <__addsf3x+0x9e>
    27d6:	99 27       	eor	r25, r25
    27d8:	ee 0f       	add	r30, r30
    27da:	97 95       	ror	r25
    27dc:	87 95       	ror	r24
    27de:	08 95       	ret

000027e0 <__fp_inf>:
    27e0:	97 f9       	bld	r25, 7
    27e2:	9f 67       	ori	r25, 0x7F	; 127
    27e4:	80 e8       	ldi	r24, 0x80	; 128
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	08 95       	ret

000027ec <__fp_mpack>:
    27ec:	9f 3f       	cpi	r25, 0xFF	; 255
    27ee:	49 f0       	breq	.+18     	; 0x2802 <__fp_mpack+0x16>
    27f0:	91 50       	subi	r25, 0x01	; 1
    27f2:	28 f4       	brcc	.+10     	; 0x27fe <__fp_mpack+0x12>
    27f4:	86 95       	lsr	r24
    27f6:	77 95       	ror	r23
    27f8:	67 95       	ror	r22
    27fa:	b7 95       	ror	r27
    27fc:	9f 5f       	subi	r25, 0xFF	; 255
    27fe:	80 38       	cpi	r24, 0x80	; 128
    2800:	9f 4f       	sbci	r25, 0xFF	; 255
    2802:	88 0f       	add	r24, r24
    2804:	96 95       	lsr	r25
    2806:	87 95       	ror	r24
    2808:	97 f9       	bld	r25, 7
    280a:	08 95       	ret

0000280c <__fp_nan>:
    280c:	9f ef       	ldi	r25, 0xFF	; 255
    280e:	80 ec       	ldi	r24, 0xC0	; 192
    2810:	08 95       	ret

00002812 <__fp_powser>:
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	1f 93       	push	r17
    2818:	0f 93       	push	r16
    281a:	ff 92       	push	r15
    281c:	ef 92       	push	r14
    281e:	df 92       	push	r13
    2820:	7b 01       	movw	r14, r22
    2822:	8c 01       	movw	r16, r24
    2824:	68 94       	set
    2826:	05 c0       	rjmp	.+10     	; 0x2832 <__fp_powser+0x20>
    2828:	da 2e       	mov	r13, r26
    282a:	ef 01       	movw	r28, r30
    282c:	22 df       	rcall	.-444    	; 0x2672 <__mulsf3x>
    282e:	fe 01       	movw	r30, r28
    2830:	e8 94       	clt
    2832:	a5 91       	lpm	r26, Z+
    2834:	25 91       	lpm	r18, Z+
    2836:	35 91       	lpm	r19, Z+
    2838:	45 91       	lpm	r20, Z+
    283a:	55 91       	lpm	r21, Z+
    283c:	ae f3       	brts	.-22     	; 0x2828 <__fp_powser+0x16>
    283e:	ef 01       	movw	r28, r30
    2840:	7c df       	rcall	.-264    	; 0x273a <__addsf3x>
    2842:	fe 01       	movw	r30, r28
    2844:	97 01       	movw	r18, r14
    2846:	a8 01       	movw	r20, r16
    2848:	da 94       	dec	r13
    284a:	79 f7       	brne	.-34     	; 0x282a <__fp_powser+0x18>
    284c:	df 90       	pop	r13
    284e:	ef 90       	pop	r14
    2850:	ff 90       	pop	r15
    2852:	0f 91       	pop	r16
    2854:	1f 91       	pop	r17
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <__fp_pscA>:
    285c:	00 24       	eor	r0, r0
    285e:	0a 94       	dec	r0
    2860:	16 16       	cp	r1, r22
    2862:	17 06       	cpc	r1, r23
    2864:	18 06       	cpc	r1, r24
    2866:	09 06       	cpc	r0, r25
    2868:	08 95       	ret

0000286a <__fp_pscB>:
    286a:	00 24       	eor	r0, r0
    286c:	0a 94       	dec	r0
    286e:	12 16       	cp	r1, r18
    2870:	13 06       	cpc	r1, r19
    2872:	14 06       	cpc	r1, r20
    2874:	05 06       	cpc	r0, r21
    2876:	08 95       	ret

00002878 <__fp_round>:
    2878:	09 2e       	mov	r0, r25
    287a:	03 94       	inc	r0
    287c:	00 0c       	add	r0, r0
    287e:	11 f4       	brne	.+4      	; 0x2884 <__fp_round+0xc>
    2880:	88 23       	and	r24, r24
    2882:	52 f0       	brmi	.+20     	; 0x2898 <__fp_round+0x20>
    2884:	bb 0f       	add	r27, r27
    2886:	40 f4       	brcc	.+16     	; 0x2898 <__fp_round+0x20>
    2888:	bf 2b       	or	r27, r31
    288a:	11 f4       	brne	.+4      	; 0x2890 <__fp_round+0x18>
    288c:	60 ff       	sbrs	r22, 0
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <__fp_round+0x20>
    2890:	6f 5f       	subi	r22, 0xFF	; 255
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	8f 4f       	sbci	r24, 0xFF	; 255
    2896:	9f 4f       	sbci	r25, 0xFF	; 255
    2898:	08 95       	ret

0000289a <__fp_split3>:
    289a:	57 fd       	sbrc	r21, 7
    289c:	90 58       	subi	r25, 0x80	; 128
    289e:	44 0f       	add	r20, r20
    28a0:	55 1f       	adc	r21, r21
    28a2:	59 f0       	breq	.+22     	; 0x28ba <__fp_splitA+0x10>
    28a4:	5f 3f       	cpi	r21, 0xFF	; 255
    28a6:	71 f0       	breq	.+28     	; 0x28c4 <__fp_splitA+0x1a>
    28a8:	47 95       	ror	r20

000028aa <__fp_splitA>:
    28aa:	88 0f       	add	r24, r24
    28ac:	97 fb       	bst	r25, 7
    28ae:	99 1f       	adc	r25, r25
    28b0:	61 f0       	breq	.+24     	; 0x28ca <__fp_splitA+0x20>
    28b2:	9f 3f       	cpi	r25, 0xFF	; 255
    28b4:	79 f0       	breq	.+30     	; 0x28d4 <__fp_splitA+0x2a>
    28b6:	87 95       	ror	r24
    28b8:	08 95       	ret
    28ba:	12 16       	cp	r1, r18
    28bc:	13 06       	cpc	r1, r19
    28be:	14 06       	cpc	r1, r20
    28c0:	55 1f       	adc	r21, r21
    28c2:	f2 cf       	rjmp	.-28     	; 0x28a8 <__fp_split3+0xe>
    28c4:	46 95       	lsr	r20
    28c6:	f1 df       	rcall	.-30     	; 0x28aa <__fp_splitA>
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <__fp_splitA+0x30>
    28ca:	16 16       	cp	r1, r22
    28cc:	17 06       	cpc	r1, r23
    28ce:	18 06       	cpc	r1, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	f1 cf       	rjmp	.-30     	; 0x28b6 <__fp_splitA+0xc>
    28d4:	86 95       	lsr	r24
    28d6:	71 05       	cpc	r23, r1
    28d8:	61 05       	cpc	r22, r1
    28da:	08 94       	sec
    28dc:	08 95       	ret

000028de <__fp_zero>:
    28de:	e8 94       	clt

000028e0 <__fp_szero>:
    28e0:	bb 27       	eor	r27, r27
    28e2:	66 27       	eor	r22, r22
    28e4:	77 27       	eor	r23, r23
    28e6:	cb 01       	movw	r24, r22
    28e8:	97 f9       	bld	r25, 7
    28ea:	08 95       	ret

000028ec <_exit>:
    28ec:	f8 94       	cli

000028ee <__stop_program>:
    28ee:	ff cf       	rjmp	.-2      	; 0x28ee <__stop_program>
